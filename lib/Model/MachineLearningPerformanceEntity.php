<?php
/**
 * MachineLearningPerformanceEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MachineLearningPerformanceEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MachineLearningPerformanceEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MachineLearningPerformanceEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total' => 'int',
'total_correct' => 'int',
'accuracy' => 'float',
'total_reviewed' => 'int',
'review_volume' => 'float',
'incorrect_predicted_below_threshold' => 'int',
'incorrect_predicted' => 'int',
'audit_success_rate' => 'float',
'classes' => '\Swagger\Client\Model\MachineLearningPerformanceEntity',
'confusion_matrix' => 'object',
'confusion_matrix_below_threshold' => 'object'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total' => 'int32',
'total_correct' => 'int32',
'accuracy' => 'float',
'total_reviewed' => 'int32',
'review_volume' => 'float',
'incorrect_predicted_below_threshold' => 'int32',
'incorrect_predicted' => 'int32',
'audit_success_rate' => 'float',
'classes' => null,
'confusion_matrix' => null,
'confusion_matrix_below_threshold' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total' => 'total',
'total_correct' => 'total_correct',
'accuracy' => 'accuracy',
'total_reviewed' => 'total_reviewed',
'review_volume' => 'review_volume',
'incorrect_predicted_below_threshold' => 'incorrect_predicted_below_threshold',
'incorrect_predicted' => 'incorrect_predicted',
'audit_success_rate' => 'audit_success_rate',
'classes' => 'classes',
'confusion_matrix' => 'confusion_matrix',
'confusion_matrix_below_threshold' => 'confusion_matrix_below_threshold'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total' => 'setTotal',
'total_correct' => 'setTotalCorrect',
'accuracy' => 'setAccuracy',
'total_reviewed' => 'setTotalReviewed',
'review_volume' => 'setReviewVolume',
'incorrect_predicted_below_threshold' => 'setIncorrectPredictedBelowThreshold',
'incorrect_predicted' => 'setIncorrectPredicted',
'audit_success_rate' => 'setAuditSuccessRate',
'classes' => 'setClasses',
'confusion_matrix' => 'setConfusionMatrix',
'confusion_matrix_below_threshold' => 'setConfusionMatrixBelowThreshold'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total' => 'getTotal',
'total_correct' => 'getTotalCorrect',
'accuracy' => 'getAccuracy',
'total_reviewed' => 'getTotalReviewed',
'review_volume' => 'getReviewVolume',
'incorrect_predicted_below_threshold' => 'getIncorrectPredictedBelowThreshold',
'incorrect_predicted' => 'getIncorrectPredicted',
'audit_success_rate' => 'getAuditSuccessRate',
'classes' => 'getClasses',
'confusion_matrix' => 'getConfusionMatrix',
'confusion_matrix_below_threshold' => 'getConfusionMatrixBelowThreshold'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['total_correct'] = isset($data['total_correct']) ? $data['total_correct'] : null;
        $this->container['accuracy'] = isset($data['accuracy']) ? $data['accuracy'] : null;
        $this->container['total_reviewed'] = isset($data['total_reviewed']) ? $data['total_reviewed'] : null;
        $this->container['review_volume'] = isset($data['review_volume']) ? $data['review_volume'] : null;
        $this->container['incorrect_predicted_below_threshold'] = isset($data['incorrect_predicted_below_threshold']) ? $data['incorrect_predicted_below_threshold'] : null;
        $this->container['incorrect_predicted'] = isset($data['incorrect_predicted']) ? $data['incorrect_predicted'] : null;
        $this->container['audit_success_rate'] = isset($data['audit_success_rate']) ? $data['audit_success_rate'] : null;
        $this->container['classes'] = isset($data['classes']) ? $data['classes'] : null;
        $this->container['confusion_matrix'] = isset($data['confusion_matrix']) ? $data['confusion_matrix'] : null;
        $this->container['confusion_matrix_below_threshold'] = isset($data['confusion_matrix_below_threshold']) ? $data['confusion_matrix_below_threshold'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total
     *
     * @return int
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param int $total total number of features for this analysis
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets total_correct
     *
     * @return int
     */
    public function getTotalCorrect()
    {
        return $this->container['total_correct'];
    }

    /**
     * Sets total_correct
     *
     * @param int $total_correct total number of correct predictions for this analysis
     *
     * @return $this
     */
    public function setTotalCorrect($total_correct)
    {
        $this->container['total_correct'] = $total_correct;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return float
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param float $accuracy accuracy of the predictions, defined as #correct/ #features
     *
     * @return $this
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets total_reviewed
     *
     * @return int
     */
    public function getTotalReviewed()
    {
        return $this->container['total_reviewed'];
    }

    /**
     * Sets total_reviewed
     *
     * @param int $total_reviewed Number of features audited (given the Audit threshold)
     *
     * @return $this
     */
    public function setTotalReviewed($total_reviewed)
    {
        $this->container['total_reviewed'] = $total_reviewed;

        return $this;
    }

    /**
     * Gets review_volume
     *
     * @return float
     */
    public function getReviewVolume()
    {
        return $this->container['review_volume'];
    }

    /**
     * Sets review_volume
     *
     * @param float $review_volume The proportion of all features that are reviewed
     *
     * @return $this
     */
    public function setReviewVolume($review_volume)
    {
        $this->container['review_volume'] = $review_volume;

        return $this;
    }

    /**
     * Gets incorrect_predicted_below_threshold
     *
     * @return int
     */
    public function getIncorrectPredictedBelowThreshold()
    {
        return $this->container['incorrect_predicted_below_threshold'];
    }

    /**
     * Sets incorrect_predicted_below_threshold
     *
     * @param int $incorrect_predicted_below_threshold The number of misclassified features that are reviewed
     *
     * @return $this
     */
    public function setIncorrectPredictedBelowThreshold($incorrect_predicted_below_threshold)
    {
        $this->container['incorrect_predicted_below_threshold'] = $incorrect_predicted_below_threshold;

        return $this;
    }

    /**
     * Gets incorrect_predicted
     *
     * @return int
     */
    public function getIncorrectPredicted()
    {
        return $this->container['incorrect_predicted'];
    }

    /**
     * Sets incorrect_predicted
     *
     * @param int $incorrect_predicted The number of misclassified features that are reviewed
     *
     * @return $this
     */
    public function setIncorrectPredicted($incorrect_predicted)
    {
        $this->container['incorrect_predicted'] = $incorrect_predicted;

        return $this;
    }

    /**
     * Gets audit_success_rate
     *
     * @return float
     */
    public function getAuditSuccessRate()
    {
        return $this->container['audit_success_rate'];
    }

    /**
     * Sets audit_success_rate
     *
     * @param float $audit_success_rate The proportion of misclassified features that are reviewed (scale 0-1, 1 is good)
     *
     * @return $this
     */
    public function setAuditSuccessRate($audit_success_rate)
    {
        $this->container['audit_success_rate'] = $audit_success_rate;

        return $this;
    }

    /**
     * Gets classes
     *
     * @return \Swagger\Client\Model\MachineLearningPerformanceEntity
     */
    public function getClasses()
    {
        return $this->container['classes'];
    }

    /**
     * Sets classes
     *
     * @param \Swagger\Client\Model\MachineLearningPerformanceEntity $classes classes
     *
     * @return $this
     */
    public function setClasses($classes)
    {
        $this->container['classes'] = $classes;

        return $this;
    }

    /**
     * Gets confusion_matrix
     *
     * @return object
     */
    public function getConfusionMatrix()
    {
        return $this->container['confusion_matrix'];
    }

    /**
     * Sets confusion_matrix
     *
     * @param object $confusion_matrix A Hash for the confusion matrix. consists of (e.g) for a true / false classification                                                     {actual_false:{predicted_true: x, predicted_false: y}, actual_true:{predicted_true: z, predicted_false:c}}
     *
     * @return $this
     */
    public function setConfusionMatrix($confusion_matrix)
    {
        $this->container['confusion_matrix'] = $confusion_matrix;

        return $this;
    }

    /**
     * Gets confusion_matrix_below_threshold
     *
     * @return object
     */
    public function getConfusionMatrixBelowThreshold()
    {
        return $this->container['confusion_matrix_below_threshold'];
    }

    /**
     * Sets confusion_matrix_below_threshold
     *
     * @param object $confusion_matrix_below_threshold A Hash for the confusion matrix for items getting audited. consists of (e.g) for a true / false classification                                                     {actual_false:{predicted_true: x, predicted_false: y}, actual_true:{predicted_true: z, predicted_false:c}}
     *
     * @return $this
     */
    public function setConfusionMatrixBelowThreshold($confusion_matrix_below_threshold)
    {
        $this->container['confusion_matrix_below_threshold'] = $confusion_matrix_below_threshold;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
