<?php
/**
 * BankingAccountEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BankingAccountEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankingAccountEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankingAccountEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
'name' => 'string',
'last_4' => 'string',
'account_type' => 'string',
'account_subtype' => 'string',
'card_type' => 'string',
'status' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
'name' => null,
'last_4' => null,
'account_type' => null,
'account_subtype' => null,
'card_type' => null,
'status' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
'name' => 'name',
'last_4' => 'last_4',
'account_type' => 'account_type',
'account_subtype' => 'account_subtype',
'card_type' => 'card_type',
'status' => 'status'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
'name' => 'setName',
'last_4' => 'setLast4',
'account_type' => 'setAccountType',
'account_subtype' => 'setAccountSubtype',
'card_type' => 'setCardType',
'status' => 'setStatus'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
'name' => 'getName',
'last_4' => 'getLast4',
'account_type' => 'getAccountType',
'account_subtype' => 'getAccountSubtype',
'card_type' => 'getCardType',
'status' => 'getStatus'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_TYPE_DEPOSITORY = 'depository';
const ACCOUNT_TYPE_CREDIT = 'credit';
const ACCOUNT_TYPE_BROKERAGE = 'brokerage';
const ACCOUNT_TYPE_OTHER = 'other';
const ACCOUNT_SUBTYPE_CHECKING = 'checking';
const ACCOUNT_SUBTYPE_SAVINGS = 'savings';
const ACCOUNT_SUBTYPE_PREPAIDCREDIT = 'prepaidcredit';
const ACCOUNT_SUBTYPE_CREDIT_CARD = 'credit card';
const ACCOUNT_SUBTYPE_LINE_OF_CREDIT = 'line of credit';
const ACCOUNT_SUBTYPE_BROKERAGE = 'brokerage';
const ACCOUNT_SUBTYPE_CASH_MANAGEMENT = 'cash management';
const ACCOUNT_SUBTYPE_IRA = 'ira';
const CARD_TYPE_CREDIT = 'credit';
const CARD_TYPE_DEBIT = 'debit';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountTypeAllowableValues()
    {
        return [
            self::ACCOUNT_TYPE_DEPOSITORY,
self::ACCOUNT_TYPE_CREDIT,
self::ACCOUNT_TYPE_BROKERAGE,
self::ACCOUNT_TYPE_OTHER,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountSubtypeAllowableValues()
    {
        return [
            self::ACCOUNT_SUBTYPE_CHECKING,
self::ACCOUNT_SUBTYPE_SAVINGS,
self::ACCOUNT_SUBTYPE_PREPAIDCREDIT,
self::ACCOUNT_SUBTYPE_CREDIT_CARD,
self::ACCOUNT_SUBTYPE_LINE_OF_CREDIT,
self::ACCOUNT_SUBTYPE_BROKERAGE,
self::ACCOUNT_SUBTYPE_CASH_MANAGEMENT,
self::ACCOUNT_SUBTYPE_IRA,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypeAllowableValues()
    {
        return [
            self::CARD_TYPE_CREDIT,
self::CARD_TYPE_DEBIT,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : 'banking_account';
        $this->container['name'] = isset($data['name']) ? $data['name'] : 'BofA Core Checking';
        $this->container['last_4'] = isset($data['last_4']) ? $data['last_4'] : '4532';
        $this->container['account_type'] = isset($data['account_type']) ? $data['account_type'] : 'depository';
        $this->container['account_subtype'] = isset($data['account_subtype']) ? $data['account_subtype'] : 'depository';
        $this->container['card_type'] = isset($data['card_type']) ? $data['card_type'] : 'credit';
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'connected';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['last_4'] === null) {
            $invalidProperties[] = "'last_4' can't be null";
        }
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($this->container['account_type']) && !in_array($this->container['account_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccountSubtypeAllowableValues();
        if (!is_null($this->container['account_subtype']) && !in_array($this->container['account_subtype'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_subtype', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($this->container['card_type']) && !in_array($this->container['card_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The billing source type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Account name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets last_4
     *
     * @return string
     */
    public function getLast4()
    {
        return $this->container['last_4'];
    }

    /**
     * Sets last_4
     *
     * @param string $last_4 Last 4 digits of account
     *
     * @return $this
     */
    public function setLast4($last_4)
    {
        $this->container['last_4'] = $last_4;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type The type of acccount
     *
     * @return $this
     */
    public function setAccountType($account_type)
    {
        $allowedValues = $this->getAccountTypeAllowableValues();
        if (!is_null($account_type) && !in_array($account_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets account_subtype
     *
     * @return string
     */
    public function getAccountSubtype()
    {
        return $this->container['account_subtype'];
    }

    /**
     * Sets account_subtype
     *
     * @param string $account_subtype The type of acccount
     *
     * @return $this
     */
    public function setAccountSubtype($account_subtype)
    {
        $allowedValues = $this->getAccountSubtypeAllowableValues();
        if (!is_null($account_subtype) && !in_array($account_subtype, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_subtype', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_subtype'] = $account_subtype;

        return $this;
    }

    /**
     * Gets card_type
     *
     * @return string
     */
    public function getCardType()
    {
        return $this->container['card_type'];
    }

    /**
     * Sets card_type
     *
     * @param string $card_type The type of card
     *
     * @return $this
     */
    public function setCardType($card_type)
    {
        $allowedValues = $this->getCardTypeAllowableValues();
        if (!is_null($card_type) && !in_array($card_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_type'] = $card_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The banking connection status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
