<?php
/**
 * InvoiceEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'status' => 'string',
'created_at' => '\DateTime',
'paid_date' => '\DateTime',
'start_date' => '\DateTime',
'end_date' => '\DateTime',
'employer_gross_savings_dollars' => 'float',
'employer_net_savings_dollars' => 'float',
'amount_dollars' => 'float',
'path' => 'string',
'employer' => '\Swagger\Client\Model\EmployerMinimalEntity',
'invoice_items' => '\Swagger\Client\Model\InvoiceItemEntity'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'status' => null,
'created_at' => 'date-time',
'paid_date' => 'date',
'start_date' => 'date',
'end_date' => 'date',
'employer_gross_savings_dollars' => 'float',
'employer_net_savings_dollars' => 'float',
'amount_dollars' => 'float',
'path' => null,
'employer' => null,
'invoice_items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'status' => 'status',
'created_at' => 'created_at',
'paid_date' => 'paid_date',
'start_date' => 'start_date',
'end_date' => 'end_date',
'employer_gross_savings_dollars' => 'employer_gross_savings_dollars',
'employer_net_savings_dollars' => 'employer_net_savings_dollars',
'amount_dollars' => 'amount_dollars',
'path' => 'path',
'employer' => 'employer',
'invoice_items' => 'invoice_items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'status' => 'setStatus',
'created_at' => 'setCreatedAt',
'paid_date' => 'setPaidDate',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'employer_gross_savings_dollars' => 'setEmployerGrossSavingsDollars',
'employer_net_savings_dollars' => 'setEmployerNetSavingsDollars',
'amount_dollars' => 'setAmountDollars',
'path' => 'setPath',
'employer' => 'setEmployer',
'invoice_items' => 'setInvoiceItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'status' => 'getStatus',
'created_at' => 'getCreatedAt',
'paid_date' => 'getPaidDate',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'employer_gross_savings_dollars' => 'getEmployerGrossSavingsDollars',
'employer_net_savings_dollars' => 'getEmployerNetSavingsDollars',
'amount_dollars' => 'getAmountDollars',
'path' => 'getPath',
'employer' => 'getEmployer',
'invoice_items' => 'getInvoiceItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PENDING = 'pending';
const STATUS_PAID = 'paid';
const STATUS_CLOSED_UNPAID = 'closed_unpaid';
const STATUS_FAILED = 'failed';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
self::STATUS_PAID,
self::STATUS_CLOSED_UNPAID,
self::STATUS_FAILED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : 1;
        $this->container['name'] = isset($data['name']) ? $data['name'] : '000120000300001';
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'pending';
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['paid_date'] = isset($data['paid_date']) ? $data['paid_date'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['employer_gross_savings_dollars'] = isset($data['employer_gross_savings_dollars']) ? $data['employer_gross_savings_dollars'] : 9.5;
        $this->container['employer_net_savings_dollars'] = isset($data['employer_net_savings_dollars']) ? $data['employer_net_savings_dollars'] : 4.75;
        $this->container['amount_dollars'] = isset($data['amount_dollars']) ? $data['amount_dollars'] : 4.75;
        $this->container['path'] = isset($data['path']) ? $data['path'] : '/manage/invoices/1';
        $this->container['employer'] = isset($data['employer']) ? $data['employer'] : null;
        $this->container['invoice_items'] = isset($data['invoice_items']) ? $data['invoice_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Invoice id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Invoice generated identifier
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Status of the invoice
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Date the invoice was created
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets paid_date
     *
     * @return \DateTime
     */
    public function getPaidDate()
    {
        return $this->container['paid_date'];
    }

    /**
     * Sets paid_date
     *
     * @param \DateTime $paid_date Date the invoice was paid
     *
     * @return $this
     */
    public function setPaidDate($paid_date)
    {
        $this->container['paid_date'] = $paid_date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Start date of the earliest invoice item pay period
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date End date of the lastest invoice item pay period
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets employer_gross_savings_dollars
     *
     * @return float
     */
    public function getEmployerGrossSavingsDollars()
    {
        return $this->container['employer_gross_savings_dollars'];
    }

    /**
     * Sets employer_gross_savings_dollars
     *
     * @param float $employer_gross_savings_dollars Total employer gross savings
     *
     * @return $this
     */
    public function setEmployerGrossSavingsDollars($employer_gross_savings_dollars)
    {
        $this->container['employer_gross_savings_dollars'] = $employer_gross_savings_dollars;

        return $this;
    }

    /**
     * Gets employer_net_savings_dollars
     *
     * @return float
     */
    public function getEmployerNetSavingsDollars()
    {
        return $this->container['employer_net_savings_dollars'];
    }

    /**
     * Sets employer_net_savings_dollars
     *
     * @param float $employer_net_savings_dollars Total employer net savings
     *
     * @return $this
     */
    public function setEmployerNetSavingsDollars($employer_net_savings_dollars)
    {
        $this->container['employer_net_savings_dollars'] = $employer_net_savings_dollars;

        return $this;
    }

    /**
     * Gets amount_dollars
     *
     * @return float
     */
    public function getAmountDollars()
    {
        return $this->container['amount_dollars'];
    }

    /**
     * Sets amount_dollars
     *
     * @param float $amount_dollars Alice share
     *
     * @return $this
     */
    public function setAmountDollars($amount_dollars)
    {
        $this->container['amount_dollars'] = $amount_dollars;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path Relative path to invoice details view
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets employer
     *
     * @return \Swagger\Client\Model\EmployerMinimalEntity
     */
    public function getEmployer()
    {
        return $this->container['employer'];
    }

    /**
     * Sets employer
     *
     * @param \Swagger\Client\Model\EmployerMinimalEntity $employer employer
     *
     * @return $this
     */
    public function setEmployer($employer)
    {
        $this->container['employer'] = $employer;

        return $this;
    }

    /**
     * Gets invoice_items
     *
     * @return \Swagger\Client\Model\InvoiceItemEntity
     */
    public function getInvoiceItems()
    {
        return $this->container['invoice_items'];
    }

    /**
     * Sets invoice_items
     *
     * @param \Swagger\Client\Model\InvoiceItemEntity $invoice_items invoice_items
     *
     * @return $this
     */
    public function setInvoiceItems($invoice_items)
    {
        $this->container['invoice_items'] = $invoice_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
