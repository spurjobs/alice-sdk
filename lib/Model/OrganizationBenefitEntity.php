<?php
/**
 * OrganizationBenefitEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationBenefitEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationBenefitEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationBenefitEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'benefit_type' => 'string',
'enrollment_start_date' => 'string',
'enrollment_end_date' => 'string',
'plan_year_start_date' => 'string',
'plan_year_end_date' => 'string',
'enrollment_days_remaining' => 'int',
'is_fsa' => 'bool',
'requires_caf_plan' => 'bool',
'enabled' => 'bool',
'pretax_category' => 'string',
'enrolled_employee_count' => 'int',
'deductions_per_pay_period_dollars' => 'float',
'deductions_this_year_dollars' => 'float',
'estimated_annual_payroll_tax_savings_dollars' => 'float',
'reimbursements_this_year_dollars' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'benefit_type' => null,
'enrollment_start_date' => null,
'enrollment_end_date' => null,
'plan_year_start_date' => null,
'plan_year_end_date' => null,
'enrollment_days_remaining' => 'int32',
'is_fsa' => null,
'requires_caf_plan' => null,
'enabled' => null,
'pretax_category' => null,
'enrolled_employee_count' => 'int32',
'deductions_per_pay_period_dollars' => 'float',
'deductions_this_year_dollars' => 'float',
'estimated_annual_payroll_tax_savings_dollars' => 'float',
'reimbursements_this_year_dollars' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'benefit_type' => 'benefit_type',
'enrollment_start_date' => 'enrollment_start_date',
'enrollment_end_date' => 'enrollment_end_date',
'plan_year_start_date' => 'plan_year_start_date',
'plan_year_end_date' => 'plan_year_end_date',
'enrollment_days_remaining' => 'enrollment_days_remaining',
'is_fsa' => 'is_fsa',
'requires_caf_plan' => 'requires_caf_plan',
'enabled' => 'enabled',
'pretax_category' => 'pretax_category',
'enrolled_employee_count' => 'enrolled_employee_count',
'deductions_per_pay_period_dollars' => 'deductions_per_pay_period_dollars',
'deductions_this_year_dollars' => 'deductions_this_year_dollars',
'estimated_annual_payroll_tax_savings_dollars' => 'estimated_annual_payroll_tax_savings_dollars',
'reimbursements_this_year_dollars' => 'reimbursements_this_year_dollars'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'benefit_type' => 'setBenefitType',
'enrollment_start_date' => 'setEnrollmentStartDate',
'enrollment_end_date' => 'setEnrollmentEndDate',
'plan_year_start_date' => 'setPlanYearStartDate',
'plan_year_end_date' => 'setPlanYearEndDate',
'enrollment_days_remaining' => 'setEnrollmentDaysRemaining',
'is_fsa' => 'setIsFsa',
'requires_caf_plan' => 'setRequiresCafPlan',
'enabled' => 'setEnabled',
'pretax_category' => 'setPretaxCategory',
'enrolled_employee_count' => 'setEnrolledEmployeeCount',
'deductions_per_pay_period_dollars' => 'setDeductionsPerPayPeriodDollars',
'deductions_this_year_dollars' => 'setDeductionsThisYearDollars',
'estimated_annual_payroll_tax_savings_dollars' => 'setEstimatedAnnualPayrollTaxSavingsDollars',
'reimbursements_this_year_dollars' => 'setReimbursementsThisYearDollars'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'benefit_type' => 'getBenefitType',
'enrollment_start_date' => 'getEnrollmentStartDate',
'enrollment_end_date' => 'getEnrollmentEndDate',
'plan_year_start_date' => 'getPlanYearStartDate',
'plan_year_end_date' => 'getPlanYearEndDate',
'enrollment_days_remaining' => 'getEnrollmentDaysRemaining',
'is_fsa' => 'getIsFsa',
'requires_caf_plan' => 'getRequiresCafPlan',
'enabled' => 'getEnabled',
'pretax_category' => 'getPretaxCategory',
'enrolled_employee_count' => 'getEnrolledEmployeeCount',
'deductions_per_pay_period_dollars' => 'getDeductionsPerPayPeriodDollars',
'deductions_this_year_dollars' => 'getDeductionsThisYearDollars',
'estimated_annual_payroll_tax_savings_dollars' => 'getEstimatedAnnualPayrollTaxSavingsDollars',
'reimbursements_this_year_dollars' => 'getReimbursementsThisYearDollars'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : 'Mass transit';
        $this->container['benefit_type'] = isset($data['benefit_type']) ? $data['benefit_type'] : 'mass_transit';
        $this->container['enrollment_start_date'] = isset($data['enrollment_start_date']) ? $data['enrollment_start_date'] : null;
        $this->container['enrollment_end_date'] = isset($data['enrollment_end_date']) ? $data['enrollment_end_date'] : null;
        $this->container['plan_year_start_date'] = isset($data['plan_year_start_date']) ? $data['plan_year_start_date'] : null;
        $this->container['plan_year_end_date'] = isset($data['plan_year_end_date']) ? $data['plan_year_end_date'] : null;
        $this->container['enrollment_days_remaining'] = isset($data['enrollment_days_remaining']) ? $data['enrollment_days_remaining'] : null;
        $this->container['is_fsa'] = isset($data['is_fsa']) ? $data['is_fsa'] : null;
        $this->container['requires_caf_plan'] = isset($data['requires_caf_plan']) ? $data['requires_caf_plan'] : null;
        $this->container['enabled'] = isset($data['enabled']) ? $data['enabled'] : true;
        $this->container['pretax_category'] = isset($data['pretax_category']) ? $data['pretax_category'] : 'mass_transit';
        $this->container['enrolled_employee_count'] = isset($data['enrolled_employee_count']) ? $data['enrolled_employee_count'] : 1;
        $this->container['deductions_per_pay_period_dollars'] = isset($data['deductions_per_pay_period_dollars']) ? $data['deductions_per_pay_period_dollars'] : 1000.0;
        $this->container['deductions_this_year_dollars'] = isset($data['deductions_this_year_dollars']) ? $data['deductions_this_year_dollars'] : 1000.0;
        $this->container['estimated_annual_payroll_tax_savings_dollars'] = isset($data['estimated_annual_payroll_tax_savings_dollars']) ? $data['estimated_annual_payroll_tax_savings_dollars'] : 1000.0;
        $this->container['reimbursements_this_year_dollars'] = isset($data['reimbursements_this_year_dollars']) ? $data['reimbursements_this_year_dollars'] : 1000.0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['benefit_type'] === null) {
            $invalidProperties[] = "'benefit_type' can't be null";
        }
        if ($this->container['is_fsa'] === null) {
            $invalidProperties[] = "'is_fsa' can't be null";
        }
        if ($this->container['requires_caf_plan'] === null) {
            $invalidProperties[] = "'requires_caf_plan' can't be null";
        }
        if ($this->container['enabled'] === null) {
            $invalidProperties[] = "'enabled' can't be null";
        }
        if ($this->container['pretax_category'] === null) {
            $invalidProperties[] = "'pretax_category' can't be null";
        }
        if ($this->container['enrolled_employee_count'] === null) {
            $invalidProperties[] = "'enrolled_employee_count' can't be null";
        }
        if ($this->container['deductions_this_year_dollars'] === null) {
            $invalidProperties[] = "'deductions_this_year_dollars' can't be null";
        }
        if ($this->container['estimated_annual_payroll_tax_savings_dollars'] === null) {
            $invalidProperties[] = "'estimated_annual_payroll_tax_savings_dollars' can't be null";
        }
        if ($this->container['reimbursements_this_year_dollars'] === null) {
            $invalidProperties[] = "'reimbursements_this_year_dollars' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of benefit
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets benefit_type
     *
     * @return string
     */
    public function getBenefitType()
    {
        return $this->container['benefit_type'];
    }

    /**
     * Sets benefit_type
     *
     * @param string $benefit_type Benefit type
     *
     * @return $this
     */
    public function setBenefitType($benefit_type)
    {
        $this->container['benefit_type'] = $benefit_type;

        return $this;
    }

    /**
     * Gets enrollment_start_date
     *
     * @return string
     */
    public function getEnrollmentStartDate()
    {
        return $this->container['enrollment_start_date'];
    }

    /**
     * Sets enrollment_start_date
     *
     * @param string $enrollment_start_date Start of enrollment period
     *
     * @return $this
     */
    public function setEnrollmentStartDate($enrollment_start_date)
    {
        $this->container['enrollment_start_date'] = $enrollment_start_date;

        return $this;
    }

    /**
     * Gets enrollment_end_date
     *
     * @return string
     */
    public function getEnrollmentEndDate()
    {
        return $this->container['enrollment_end_date'];
    }

    /**
     * Sets enrollment_end_date
     *
     * @param string $enrollment_end_date End of enrollment period
     *
     * @return $this
     */
    public function setEnrollmentEndDate($enrollment_end_date)
    {
        $this->container['enrollment_end_date'] = $enrollment_end_date;

        return $this;
    }

    /**
     * Gets plan_year_start_date
     *
     * @return string
     */
    public function getPlanYearStartDate()
    {
        return $this->container['plan_year_start_date'];
    }

    /**
     * Sets plan_year_start_date
     *
     * @param string $plan_year_start_date Plan year start date
     *
     * @return $this
     */
    public function setPlanYearStartDate($plan_year_start_date)
    {
        $this->container['plan_year_start_date'] = $plan_year_start_date;

        return $this;
    }

    /**
     * Gets plan_year_end_date
     *
     * @return string
     */
    public function getPlanYearEndDate()
    {
        return $this->container['plan_year_end_date'];
    }

    /**
     * Sets plan_year_end_date
     *
     * @param string $plan_year_end_date Plan year end date
     *
     * @return $this
     */
    public function setPlanYearEndDate($plan_year_end_date)
    {
        $this->container['plan_year_end_date'] = $plan_year_end_date;

        return $this;
    }

    /**
     * Gets enrollment_days_remaining
     *
     * @return int
     */
    public function getEnrollmentDaysRemaining()
    {
        return $this->container['enrollment_days_remaining'];
    }

    /**
     * Sets enrollment_days_remaining
     *
     * @param int $enrollment_days_remaining Number of days remaining until plan start, if benefit is an FSA
     *
     * @return $this
     */
    public function setEnrollmentDaysRemaining($enrollment_days_remaining)
    {
        $this->container['enrollment_days_remaining'] = $enrollment_days_remaining;

        return $this;
    }

    /**
     * Gets is_fsa
     *
     * @return bool
     */
    public function getIsFsa()
    {
        return $this->container['is_fsa'];
    }

    /**
     * Sets is_fsa
     *
     * @param bool $is_fsa Is this an FSA benefit?
     *
     * @return $this
     */
    public function setIsFsa($is_fsa)
    {
        $this->container['is_fsa'] = $is_fsa;

        return $this;
    }

    /**
     * Gets requires_caf_plan
     *
     * @return bool
     */
    public function getRequiresCafPlan()
    {
        return $this->container['requires_caf_plan'];
    }

    /**
     * Sets requires_caf_plan
     *
     * @param bool $requires_caf_plan Does this benefit require a cafeteria plan?
     *
     * @return $this
     */
    public function setRequiresCafPlan($requires_caf_plan)
    {
        $this->container['requires_caf_plan'] = $requires_caf_plan;

        return $this;
    }

    /**
     * Gets enabled
     *
     * @return bool
     */
    public function getEnabled()
    {
        return $this->container['enabled'];
    }

    /**
     * Sets enabled
     *
     * @param bool $enabled Is this benefit enabled?
     *
     * @return $this
     */
    public function setEnabled($enabled)
    {
        $this->container['enabled'] = $enabled;

        return $this;
    }

    /**
     * Gets pretax_category
     *
     * @return string
     */
    public function getPretaxCategory()
    {
        return $this->container['pretax_category'];
    }

    /**
     * Sets pretax_category
     *
     * @param string $pretax_category Benefit pretax category
     *
     * @return $this
     */
    public function setPretaxCategory($pretax_category)
    {
        $this->container['pretax_category'] = $pretax_category;

        return $this;
    }

    /**
     * Gets enrolled_employee_count
     *
     * @return int
     */
    public function getEnrolledEmployeeCount()
    {
        return $this->container['enrolled_employee_count'];
    }

    /**
     * Sets enrolled_employee_count
     *
     * @param int $enrolled_employee_count Number of employees enrolled in this benefit
     *
     * @return $this
     */
    public function setEnrolledEmployeeCount($enrolled_employee_count)
    {
        $this->container['enrolled_employee_count'] = $enrolled_employee_count;

        return $this;
    }

    /**
     * Gets deductions_per_pay_period_dollars
     *
     * @return float
     */
    public function getDeductionsPerPayPeriodDollars()
    {
        return $this->container['deductions_per_pay_period_dollars'];
    }

    /**
     * Sets deductions_per_pay_period_dollars
     *
     * @param float $deductions_per_pay_period_dollars Deductions per pay period (FSA only)
     *
     * @return $this
     */
    public function setDeductionsPerPayPeriodDollars($deductions_per_pay_period_dollars)
    {
        $this->container['deductions_per_pay_period_dollars'] = $deductions_per_pay_period_dollars;

        return $this;
    }

    /**
     * Gets deductions_this_year_dollars
     *
     * @return float
     */
    public function getDeductionsThisYearDollars()
    {
        return $this->container['deductions_this_year_dollars'];
    }

    /**
     * Sets deductions_this_year_dollars
     *
     * @param float $deductions_this_year_dollars Deductions so far this year
     *
     * @return $this
     */
    public function setDeductionsThisYearDollars($deductions_this_year_dollars)
    {
        $this->container['deductions_this_year_dollars'] = $deductions_this_year_dollars;

        return $this;
    }

    /**
     * Gets estimated_annual_payroll_tax_savings_dollars
     *
     * @return float
     */
    public function getEstimatedAnnualPayrollTaxSavingsDollars()
    {
        return $this->container['estimated_annual_payroll_tax_savings_dollars'];
    }

    /**
     * Sets estimated_annual_payroll_tax_savings_dollars
     *
     * @param float $estimated_annual_payroll_tax_savings_dollars Estimated total payroll tax savings this year
     *
     * @return $this
     */
    public function setEstimatedAnnualPayrollTaxSavingsDollars($estimated_annual_payroll_tax_savings_dollars)
    {
        $this->container['estimated_annual_payroll_tax_savings_dollars'] = $estimated_annual_payroll_tax_savings_dollars;

        return $this;
    }

    /**
     * Gets reimbursements_this_year_dollars
     *
     * @return float
     */
    public function getReimbursementsThisYearDollars()
    {
        return $this->container['reimbursements_this_year_dollars'];
    }

    /**
     * Sets reimbursements_this_year_dollars
     *
     * @param float $reimbursements_this_year_dollars Reimbursements so far this year
     *
     * @return $this
     */
    public function setReimbursementsThisYearDollars($reimbursements_this_year_dollars)
    {
        $this->container['reimbursements_this_year_dollars'] = $reimbursements_this_year_dollars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
