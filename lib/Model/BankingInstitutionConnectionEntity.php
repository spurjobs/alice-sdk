<?php
/**
 * BankingInstitutionConnectionEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BankingInstitutionConnectionEntity Class Doc Comment
 *
 * @category Class
 * @description Reconnect a banking institution
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankingInstitutionConnectionEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankingInstitutionConnectionEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'institution_identifier' => 'string',
'status' => 'string',
'card_types' => 'string',
'banking_connection_error_at' => '\DateTime',
'config' => 'string',
'institution' => 'string',
'platform' => 'string',
'banking_accounts' => '\Swagger\Client\Model\BankingAccountEntity[]',
'superseded' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'name' => null,
'institution_identifier' => null,
'status' => null,
'card_types' => null,
'banking_connection_error_at' => 'date-time',
'config' => null,
'institution' => null,
'platform' => null,
'banking_accounts' => null,
'superseded' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'institution_identifier' => 'institution_identifier',
'status' => 'status',
'card_types' => 'card_types',
'banking_connection_error_at' => 'banking_connection_error_at',
'config' => 'config',
'institution' => 'institution',
'platform' => 'platform',
'banking_accounts' => 'banking_accounts',
'superseded' => 'superseded'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'institution_identifier' => 'setInstitutionIdentifier',
'status' => 'setStatus',
'card_types' => 'setCardTypes',
'banking_connection_error_at' => 'setBankingConnectionErrorAt',
'config' => 'setConfig',
'institution' => 'setInstitution',
'platform' => 'setPlatform',
'banking_accounts' => 'setBankingAccounts',
'superseded' => 'setSuperseded'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'institution_identifier' => 'getInstitutionIdentifier',
'status' => 'getStatus',
'card_types' => 'getCardTypes',
'banking_connection_error_at' => 'getBankingConnectionErrorAt',
'config' => 'getConfig',
'institution' => 'getInstitution',
'platform' => 'getPlatform',
'banking_accounts' => 'getBankingAccounts',
'superseded' => 'getSuperseded'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_PENDING = 'pending';
const STATUS_CONNECTED = 'connected';
const STATUS_CONNECTION_ERROR = 'connection_error';
const STATUS_CUSTOMER_DISCONNECTED = 'customer_disconnected';
const STATUS_SYSTEM_DISCONNECTED = 'system_disconnected';
const CARD_TYPES_CREDIT_CARD = 'credit card';
const CARD_TYPES_CREDIT_CARDS = 'credit cards';
const CARD_TYPES_DEBIT_CARD = 'debit card';
const CARD_TYPES_DEBIT_CARDS = 'debit cards';
const CARD_TYPES_CREDIT_AND_DEBIT_CARDS = 'credit and debit cards';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_PENDING,
self::STATUS_CONNECTED,
self::STATUS_CONNECTION_ERROR,
self::STATUS_CUSTOMER_DISCONNECTED,
self::STATUS_SYSTEM_DISCONNECTED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCardTypesAllowableValues()
    {
        return [
            self::CARD_TYPES_CREDIT_CARD,
self::CARD_TYPES_CREDIT_CARDS,
self::CARD_TYPES_DEBIT_CARD,
self::CARD_TYPES_DEBIT_CARDS,
self::CARD_TYPES_CREDIT_AND_DEBIT_CARDS,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : 1;
        $this->container['name'] = isset($data['name']) ? $data['name'] : 'Wells Fargo';
        $this->container['institution_identifier'] = isset($data['institution_identifier']) ? $data['institution_identifier'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'connected';
        $this->container['card_types'] = isset($data['card_types']) ? $data['card_types'] : 'credit cards';
        $this->container['banking_connection_error_at'] = isset($data['banking_connection_error_at']) ? $data['banking_connection_error_at'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['institution'] = isset($data['institution']) ? $data['institution'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : 'quovo';
        $this->container['banking_accounts'] = isset($data['banking_accounts']) ? $data['banking_accounts'] : null;
        $this->container['superseded'] = isset($data['superseded']) ? $data['superseded'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['institution_identifier'] === null) {
            $invalidProperties[] = "'institution_identifier' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['card_types'] === null) {
            $invalidProperties[] = "'card_types' can't be null";
        }
        $allowedValues = $this->getCardTypesAllowableValues();
        if (!is_null($this->container['card_types']) && !in_array($this->container['card_types'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'card_types', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id connection id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name cnnection name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets institution_identifier
     *
     * @return string
     */
    public function getInstitutionIdentifier()
    {
        return $this->container['institution_identifier'];
    }

    /**
     * Sets institution_identifier
     *
     * @param string $institution_identifier institution identifier (Plaid institution id)
     *
     * @return $this
     */
    public function setInstitutionIdentifier($institution_identifier)
    {
        $this->container['institution_identifier'] = $institution_identifier;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status connection status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets card_types
     *
     * @return string
     */
    public function getCardTypes()
    {
        return $this->container['card_types'];
    }

    /**
     * Sets card_types
     *
     * @param string $card_types types of cards held in this account
     *
     * @return $this
     */
    public function setCardTypes($card_types)
    {
        $allowedValues = $this->getCardTypesAllowableValues();
        if (!in_array($card_types, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'card_types', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['card_types'] = $card_types;

        return $this;
    }

    /**
     * Gets banking_connection_error_at
     *
     * @return \DateTime
     */
    public function getBankingConnectionErrorAt()
    {
        return $this->container['banking_connection_error_at'];
    }

    /**
     * Sets banking_connection_error_at
     *
     * @param \DateTime $banking_connection_error_at Date the connection error occurred if it exists
     *
     * @return $this
     */
    public function setBankingConnectionErrorAt($banking_connection_error_at)
    {
        $this->container['banking_connection_error_at'] = $banking_connection_error_at;

        return $this;
    }

    /**
     * Gets config
     *
     * @return string
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param string $config Platform-specific config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets institution
     *
     * @return string
     */
    public function getInstitution()
    {
        return $this->container['institution'];
    }

    /**
     * Sets institution
     *
     * @param string $institution Platform-specific institution
     *
     * @return $this
     */
    public function setInstitution($institution)
    {
        $this->container['institution'] = $institution;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform Platform name
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets banking_accounts
     *
     * @return \Swagger\Client\Model\BankingAccountEntity[]
     */
    public function getBankingAccounts()
    {
        return $this->container['banking_accounts'];
    }

    /**
     * Sets banking_accounts
     *
     * @param \Swagger\Client\Model\BankingAccountEntity[] $banking_accounts accounts in this institution
     *
     * @return $this
     */
    public function setBankingAccounts($banking_accounts)
    {
        $this->container['banking_accounts'] = $banking_accounts;

        return $this;
    }

    /**
     * Gets superseded
     *
     * @return bool
     */
    public function getSuperseded()
    {
        return $this->container['superseded'];
    }

    /**
     * Sets superseded
     *
     * @param bool $superseded Indicates if this institution is being superseded by another
     *
     * @return $this
     */
    public function setSuperseded($superseded)
    {
        $this->container['superseded'] = $superseded;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
