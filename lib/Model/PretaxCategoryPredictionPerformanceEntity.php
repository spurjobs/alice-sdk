<?php
/**
 * PretaxCategoryPredictionPerformanceEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PretaxCategoryPredictionPerformanceEntity Class Doc Comment
 *
 * @category Class
 * @description stats about ML performance
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PretaxCategoryPredictionPerformanceEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PretaxCategoryPredictionPerformanceEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
'start_date' => '\DateTime',
'end_date' => '\DateTime',
'audit_threshold' => 'float',
'recent' => '\Swagger\Client\Model\MachineLearningPerformanceEntity',
'all_time' => '\Swagger\Client\Model\MachineLearningPerformanceEntity'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date',
'start_date' => 'date',
'end_date' => 'date',
'audit_threshold' => 'float',
'recent' => null,
'all_time' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
'start_date' => 'start_date',
'end_date' => 'end_date',
'audit_threshold' => 'audit_threshold',
'recent' => 'recent',
'all_time' => 'all_time'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'audit_threshold' => 'setAuditThreshold',
'recent' => 'setRecent',
'all_time' => 'setAllTime'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'audit_threshold' => 'getAuditThreshold',
'recent' => 'getRecent',
'all_time' => 'getAllTime'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['audit_threshold'] = isset($data['audit_threshold']) ? $data['audit_threshold'] : null;
        $this->container['recent'] = isset($data['recent']) ? $data['recent'] : null;
        $this->container['all_time'] = isset($data['all_time']) ? $data['all_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date The date the api was called
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date The start date for the recent analysis node
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date The end date for the recent analysis node
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets audit_threshold
     *
     * @return float
     */
    public function getAuditThreshold()
    {
        return $this->container['audit_threshold'];
    }

    /**
     * Sets audit_threshold
     *
     * @param float $audit_threshold The threshold for auditing transactions. all transactions with confidence below this number are reviewed. Lower numbers imply fewer reviews (but more chance of missing something
     *
     * @return $this
     */
    public function setAuditThreshold($audit_threshold)
    {
        $this->container['audit_threshold'] = $audit_threshold;

        return $this;
    }

    /**
     * Gets recent
     *
     * @return \Swagger\Client\Model\MachineLearningPerformanceEntity
     */
    public function getRecent()
    {
        return $this->container['recent'];
    }

    /**
     * Sets recent
     *
     * @param \Swagger\Client\Model\MachineLearningPerformanceEntity $recent recent
     *
     * @return $this
     */
    public function setRecent($recent)
    {
        $this->container['recent'] = $recent;

        return $this;
    }

    /**
     * Gets all_time
     *
     * @return \Swagger\Client\Model\MachineLearningPerformanceEntity
     */
    public function getAllTime()
    {
        return $this->container['all_time'];
    }

    /**
     * Sets all_time
     *
     * @param \Swagger\Client\Model\MachineLearningPerformanceEntity $all_time all_time
     *
     * @return $this
     */
    public function setAllTime($all_time)
    {
        $this->container['all_time'] = $all_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
