<?php
/**
 * ChurnStatsEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ChurnStatsEntity Class Doc Comment
 *
 * @category Class
 * @description Monthly stats on churn of Alice members across each employer
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChurnStatsEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ChurnStatsEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
'end_date' => '\DateTime',
'alice_churn_count' => 'int',
'alice_customer_churn' => 'float',
'removed_from_roster_count' => 'int',
'inactive_user_count' => 'int',
'card_disconnect_count' => 'int',
'average_churn_by_employer' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_date' => 'date',
'end_date' => 'date',
'alice_churn_count' => 'int32',
'alice_customer_churn' => 'float',
'removed_from_roster_count' => 'int32',
'inactive_user_count' => 'int32',
'card_disconnect_count' => 'int32',
'average_churn_by_employer' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'start_date',
'end_date' => 'end_date',
'alice_churn_count' => 'alice_churn_count',
'alice_customer_churn' => 'alice_customer_churn',
'removed_from_roster_count' => 'removed_from_roster_count',
'inactive_user_count' => 'inactive_user_count',
'card_disconnect_count' => 'card_disconnect_count',
'average_churn_by_employer' => 'average_churn_by_employer'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'alice_churn_count' => 'setAliceChurnCount',
'alice_customer_churn' => 'setAliceCustomerChurn',
'removed_from_roster_count' => 'setRemovedFromRosterCount',
'inactive_user_count' => 'setInactiveUserCount',
'card_disconnect_count' => 'setCardDisconnectCount',
'average_churn_by_employer' => 'setAverageChurnByEmployer'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'alice_churn_count' => 'getAliceChurnCount',
'alice_customer_churn' => 'getAliceCustomerChurn',
'removed_from_roster_count' => 'getRemovedFromRosterCount',
'inactive_user_count' => 'getInactiveUserCount',
'card_disconnect_count' => 'getCardDisconnectCount',
'average_churn_by_employer' => 'getAverageChurnByEmployer'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['alice_churn_count'] = isset($data['alice_churn_count']) ? $data['alice_churn_count'] : null;
        $this->container['alice_customer_churn'] = isset($data['alice_customer_churn']) ? $data['alice_customer_churn'] : 0.1327;
        $this->container['removed_from_roster_count'] = isset($data['removed_from_roster_count']) ? $data['removed_from_roster_count'] : null;
        $this->container['inactive_user_count'] = isset($data['inactive_user_count']) ? $data['inactive_user_count'] : null;
        $this->container['card_disconnect_count'] = isset($data['card_disconnect_count']) ? $data['card_disconnect_count'] : null;
        $this->container['average_churn_by_employer'] = isset($data['average_churn_by_employer']) ? $data['average_churn_by_employer'] : 0.1402;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['alice_customer_churn'] === null) {
            $invalidProperties[] = "'alice_customer_churn' can't be null";
        }
        if ($this->container['average_churn_by_employer'] === null) {
            $invalidProperties[] = "'average_churn_by_employer' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start date of analysis period
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end date of analysis period
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets alice_churn_count
     *
     * @return int
     */
    public function getAliceChurnCount()
    {
        return $this->container['alice_churn_count'];
    }

    /**
     * Sets alice_churn_count
     *
     * @param int $alice_churn_count total number of users unenrolled and turned inactive during the period
     *
     * @return $this
     */
    public function setAliceChurnCount($alice_churn_count)
    {
        $this->container['alice_churn_count'] = $alice_churn_count;

        return $this;
    }

    /**
     * Gets alice_customer_churn
     *
     * @return float
     */
    public function getAliceCustomerChurn()
    {
        return $this->container['alice_customer_churn'];
    }

    /**
     * Sets alice_customer_churn
     *
     * @param float $alice_customer_churn Mean churn of all enrolled employees in a period
     *
     * @return $this
     */
    public function setAliceCustomerChurn($alice_customer_churn)
    {
        $this->container['alice_customer_churn'] = $alice_customer_churn;

        return $this;
    }

    /**
     * Gets removed_from_roster_count
     *
     * @return int
     */
    public function getRemovedFromRosterCount()
    {
        return $this->container['removed_from_roster_count'];
    }

    /**
     * Sets removed_from_roster_count
     *
     * @param int $removed_from_roster_count total number of users removed from roster during the period
     *
     * @return $this
     */
    public function setRemovedFromRosterCount($removed_from_roster_count)
    {
        $this->container['removed_from_roster_count'] = $removed_from_roster_count;

        return $this;
    }

    /**
     * Gets inactive_user_count
     *
     * @return int
     */
    public function getInactiveUserCount()
    {
        return $this->container['inactive_user_count'];
    }

    /**
     * Sets inactive_user_count
     *
     * @param int $inactive_user_count total number of users turned inactive during the period
     *
     * @return $this
     */
    public function setInactiveUserCount($inactive_user_count)
    {
        $this->container['inactive_user_count'] = $inactive_user_count;

        return $this;
    }

    /**
     * Gets card_disconnect_count
     *
     * @return int
     */
    public function getCardDisconnectCount()
    {
        return $this->container['card_disconnect_count'];
    }

    /**
     * Sets card_disconnect_count
     *
     * @param int $card_disconnect_count of the inactive user count, total number of users who have at least 1 card disconnected
     *
     * @return $this
     */
    public function setCardDisconnectCount($card_disconnect_count)
    {
        $this->container['card_disconnect_count'] = $card_disconnect_count;

        return $this;
    }

    /**
     * Gets average_churn_by_employer
     *
     * @return float
     */
    public function getAverageChurnByEmployer()
    {
        return $this->container['average_churn_by_employer'];
    }

    /**
     * Sets average_churn_by_employer
     *
     * @param float $average_churn_by_employer Mean of chruns for each employer
     *
     * @return $this
     */
    public function setAverageChurnByEmployer($average_churn_by_employer)
    {
        $this->container['average_churn_by_employer'] = $average_churn_by_employer;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
