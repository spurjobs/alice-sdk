<?php
/**
 * EmployeeSpendingAnalysisEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeSpendingAnalysisEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeSpendingAnalysisEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeSpendingAnalysisEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'city' => 'string',
'company' => 'string',
'days_since_enrollment' => 'string',
'spend_dollars' => 'string',
'annualized_spend_dollars' => 'string',
'savings_dollars' => 'string',
'annualized_savings_dollars' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'city' => null,
'company' => null,
'days_since_enrollment' => null,
'spend_dollars' => null,
'annualized_spend_dollars' => null,
'savings_dollars' => null,
'annualized_savings_dollars' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'city' => 'city',
'company' => 'company',
'days_since_enrollment' => 'days_since_enrollment',
'spend_dollars' => 'spend_dollars',
'annualized_spend_dollars' => 'annualized_spend_dollars',
'savings_dollars' => 'savings_dollars',
'annualized_savings_dollars' => 'annualized_savings_dollars'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'city' => 'setCity',
'company' => 'setCompany',
'days_since_enrollment' => 'setDaysSinceEnrollment',
'spend_dollars' => 'setSpendDollars',
'annualized_spend_dollars' => 'setAnnualizedSpendDollars',
'savings_dollars' => 'setSavingsDollars',
'annualized_savings_dollars' => 'setAnnualizedSavingsDollars'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'city' => 'getCity',
'company' => 'getCompany',
'days_since_enrollment' => 'getDaysSinceEnrollment',
'spend_dollars' => 'getSpendDollars',
'annualized_spend_dollars' => 'getAnnualizedSpendDollars',
'savings_dollars' => 'getSavingsDollars',
'annualized_savings_dollars' => 'getAnnualizedSavingsDollars'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['company'] = isset($data['company']) ? $data['company'] : null;
        $this->container['days_since_enrollment'] = isset($data['days_since_enrollment']) ? $data['days_since_enrollment'] : null;
        $this->container['spend_dollars'] = isset($data['spend_dollars']) ? $data['spend_dollars'] : null;
        $this->container['annualized_spend_dollars'] = isset($data['annualized_spend_dollars']) ? $data['annualized_spend_dollars'] : null;
        $this->container['savings_dollars'] = isset($data['savings_dollars']) ? $data['savings_dollars'] : null;
        $this->container['annualized_savings_dollars'] = isset($data['annualized_savings_dollars']) ? $data['annualized_savings_dollars'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string $company company
     *
     * @return $this
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets days_since_enrollment
     *
     * @return string
     */
    public function getDaysSinceEnrollment()
    {
        return $this->container['days_since_enrollment'];
    }

    /**
     * Sets days_since_enrollment
     *
     * @param string $days_since_enrollment days_since_enrollment
     *
     * @return $this
     */
    public function setDaysSinceEnrollment($days_since_enrollment)
    {
        $this->container['days_since_enrollment'] = $days_since_enrollment;

        return $this;
    }

    /**
     * Gets spend_dollars
     *
     * @return string
     */
    public function getSpendDollars()
    {
        return $this->container['spend_dollars'];
    }

    /**
     * Sets spend_dollars
     *
     * @param string $spend_dollars spend_dollars
     *
     * @return $this
     */
    public function setSpendDollars($spend_dollars)
    {
        $this->container['spend_dollars'] = $spend_dollars;

        return $this;
    }

    /**
     * Gets annualized_spend_dollars
     *
     * @return string
     */
    public function getAnnualizedSpendDollars()
    {
        return $this->container['annualized_spend_dollars'];
    }

    /**
     * Sets annualized_spend_dollars
     *
     * @param string $annualized_spend_dollars annualized_spend_dollars
     *
     * @return $this
     */
    public function setAnnualizedSpendDollars($annualized_spend_dollars)
    {
        $this->container['annualized_spend_dollars'] = $annualized_spend_dollars;

        return $this;
    }

    /**
     * Gets savings_dollars
     *
     * @return string
     */
    public function getSavingsDollars()
    {
        return $this->container['savings_dollars'];
    }

    /**
     * Sets savings_dollars
     *
     * @param string $savings_dollars savings_dollars
     *
     * @return $this
     */
    public function setSavingsDollars($savings_dollars)
    {
        $this->container['savings_dollars'] = $savings_dollars;

        return $this;
    }

    /**
     * Gets annualized_savings_dollars
     *
     * @return string
     */
    public function getAnnualizedSavingsDollars()
    {
        return $this->container['annualized_savings_dollars'];
    }

    /**
     * Sets annualized_savings_dollars
     *
     * @param string $annualized_savings_dollars annualized_savings_dollars
     *
     * @return $this
     */
    public function setAnnualizedSavingsDollars($annualized_savings_dollars)
    {
        $this->container['annualized_savings_dollars'] = $annualized_savings_dollars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
