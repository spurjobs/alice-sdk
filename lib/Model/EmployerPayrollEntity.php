<?php
/**
 * EmployerPayrollEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployerPayrollEntity Class Doc Comment
 *
 * @category Class
 * @description Company details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployerPayrollEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployerPayrollEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'payroll_system_id' => 'string',
'name' => 'string',
'marketing_friendly_name' => 'string',
'payroll_account' => '\Swagger\Client\Model\AccountEntity',
'requires_benefit_bank_account' => 'bool',
'unified_billing' => 'bool',
'next_pay_period' => '\Swagger\Client\Model\PayPeriodMinimalEntity',
'payroll_config' => '\Swagger\Client\Model\PayrollConfigEntity'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'payroll_system_id' => null,
'name' => null,
'marketing_friendly_name' => null,
'payroll_account' => null,
'requires_benefit_bank_account' => null,
'unified_billing' => null,
'next_pay_period' => null,
'payroll_config' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'payroll_system_id' => 'payroll_system_id',
'name' => 'name',
'marketing_friendly_name' => 'marketing_friendly_name',
'payroll_account' => 'payroll_account',
'requires_benefit_bank_account' => 'requires_benefit_bank_account',
'unified_billing' => 'unified_billing',
'next_pay_period' => 'next_pay_period',
'payroll_config' => 'payroll_config'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'payroll_system_id' => 'setPayrollSystemId',
'name' => 'setName',
'marketing_friendly_name' => 'setMarketingFriendlyName',
'payroll_account' => 'setPayrollAccount',
'requires_benefit_bank_account' => 'setRequiresBenefitBankAccount',
'unified_billing' => 'setUnifiedBilling',
'next_pay_period' => 'setNextPayPeriod',
'payroll_config' => 'setPayrollConfig'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'payroll_system_id' => 'getPayrollSystemId',
'name' => 'getName',
'marketing_friendly_name' => 'getMarketingFriendlyName',
'payroll_account' => 'getPayrollAccount',
'requires_benefit_bank_account' => 'getRequiresBenefitBankAccount',
'unified_billing' => 'getUnifiedBilling',
'next_pay_period' => 'getNextPayPeriod',
'payroll_config' => 'getPayrollConfig'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payroll_system_id'] = isset($data['payroll_system_id']) ? $data['payroll_system_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['marketing_friendly_name'] = isset($data['marketing_friendly_name']) ? $data['marketing_friendly_name'] : null;
        $this->container['payroll_account'] = isset($data['payroll_account']) ? $data['payroll_account'] : null;
        $this->container['requires_benefit_bank_account'] = isset($data['requires_benefit_bank_account']) ? $data['requires_benefit_bank_account'] : null;
        $this->container['unified_billing'] = isset($data['unified_billing']) ? $data['unified_billing'] : null;
        $this->container['next_pay_period'] = isset($data['next_pay_period']) ? $data['next_pay_period'] : null;
        $this->container['payroll_config'] = isset($data['payroll_config']) ? $data['payroll_config'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['payroll_system_id'] === null) {
            $invalidProperties[] = "'payroll_system_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['requires_benefit_bank_account'] === null) {
            $invalidProperties[] = "'requires_benefit_bank_account' can't be null";
        }
        if ($this->container['payroll_config'] === null) {
            $invalidProperties[] = "'payroll_config' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Company ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payroll_system_id
     *
     * @return string
     */
    public function getPayrollSystemId()
    {
        return $this->container['payroll_system_id'];
    }

    /**
     * Sets payroll_system_id
     *
     * @param string $payroll_system_id Employee ID within the external payroll system
     *
     * @return $this
     */
    public function setPayrollSystemId($payroll_system_id)
    {
        $this->container['payroll_system_id'] = $payroll_system_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Company Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets marketing_friendly_name
     *
     * @return string
     */
    public function getMarketingFriendlyName()
    {
        return $this->container['marketing_friendly_name'];
    }

    /**
     * Sets marketing_friendly_name
     *
     * @param string $marketing_friendly_name Company Friendly Name
     *
     * @return $this
     */
    public function setMarketingFriendlyName($marketing_friendly_name)
    {
        $this->container['marketing_friendly_name'] = $marketing_friendly_name;

        return $this;
    }

    /**
     * Gets payroll_account
     *
     * @return \Swagger\Client\Model\AccountEntity
     */
    public function getPayrollAccount()
    {
        return $this->container['payroll_account'];
    }

    /**
     * Sets payroll_account
     *
     * @param \Swagger\Client\Model\AccountEntity $payroll_account payroll_account
     *
     * @return $this
     */
    public function setPayrollAccount($payroll_account)
    {
        $this->container['payroll_account'] = $payroll_account;

        return $this;
    }

    /**
     * Gets requires_benefit_bank_account
     *
     * @return bool
     */
    public function getRequiresBenefitBankAccount()
    {
        return $this->container['requires_benefit_bank_account'];
    }

    /**
     * Sets requires_benefit_bank_account
     *
     * @param bool $requires_benefit_bank_account Whether the organization offers a benefit that requires a bank account, like HFSA or HSA
     *
     * @return $this
     */
    public function setRequiresBenefitBankAccount($requires_benefit_bank_account)
    {
        $this->container['requires_benefit_bank_account'] = $requires_benefit_bank_account;

        return $this;
    }

    /**
     * Gets unified_billing
     *
     * @return bool
     */
    public function getUnifiedBilling()
    {
        return $this->container['unified_billing'];
    }

    /**
     * Sets unified_billing
     *
     * @param bool $unified_billing Unified billing
     *
     * @return $this
     */
    public function setUnifiedBilling($unified_billing)
    {
        $this->container['unified_billing'] = $unified_billing;

        return $this;
    }

    /**
     * Gets next_pay_period
     *
     * @return \Swagger\Client\Model\PayPeriodMinimalEntity
     */
    public function getNextPayPeriod()
    {
        return $this->container['next_pay_period'];
    }

    /**
     * Sets next_pay_period
     *
     * @param \Swagger\Client\Model\PayPeriodMinimalEntity $next_pay_period next_pay_period
     *
     * @return $this
     */
    public function setNextPayPeriod($next_pay_period)
    {
        $this->container['next_pay_period'] = $next_pay_period;

        return $this;
    }

    /**
     * Gets payroll_config
     *
     * @return \Swagger\Client\Model\PayrollConfigEntity
     */
    public function getPayrollConfig()
    {
        return $this->container['payroll_config'];
    }

    /**
     * Sets payroll_config
     *
     * @param \Swagger\Client\Model\PayrollConfigEntity $payroll_config payroll_config
     *
     * @return $this
     */
    public function setPayrollConfig($payroll_config)
    {
        $this->container['payroll_config'] = $payroll_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
