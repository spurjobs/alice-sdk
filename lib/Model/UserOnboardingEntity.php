<?php
/**
 * UserOnboardingEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserOnboardingEntity Class Doc Comment
 *
 * @category Class
 * @description Returns info related to employer admin&#x27;s onboarding status
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserOnboardingEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserOnboardingEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'onboarding_status' => 'string',
'is_org_admin' => 'bool',
'healthcare_enabled' => 'bool',
'dependent_care_enabled' => 'bool',
'unified_billing' => 'bool',
'cafeteria_plan' => '\Swagger\Client\Model\DocumentEntity',
'signup_source' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'onboarding_status' => null,
'is_org_admin' => null,
'healthcare_enabled' => null,
'dependent_care_enabled' => null,
'unified_billing' => null,
'cafeteria_plan' => null,
'signup_source' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'onboarding_status' => 'onboarding_status',
'is_org_admin' => 'is_org_admin',
'healthcare_enabled' => 'healthcare_enabled',
'dependent_care_enabled' => 'dependent_care_enabled',
'unified_billing' => 'unified_billing',
'cafeteria_plan' => 'cafeteria_plan',
'signup_source' => 'signup_source'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'onboarding_status' => 'setOnboardingStatus',
'is_org_admin' => 'setIsOrgAdmin',
'healthcare_enabled' => 'setHealthcareEnabled',
'dependent_care_enabled' => 'setDependentCareEnabled',
'unified_billing' => 'setUnifiedBilling',
'cafeteria_plan' => 'setCafeteriaPlan',
'signup_source' => 'setSignupSource'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'onboarding_status' => 'getOnboardingStatus',
'is_org_admin' => 'getIsOrgAdmin',
'healthcare_enabled' => 'getHealthcareEnabled',
'dependent_care_enabled' => 'getDependentCareEnabled',
'unified_billing' => 'getUnifiedBilling',
'cafeteria_plan' => 'getCafeteriaPlan',
'signup_source' => 'getSignupSource'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['onboarding_status'] = isset($data['onboarding_status']) ? $data['onboarding_status'] : 'details_collected';
        $this->container['is_org_admin'] = isset($data['is_org_admin']) ? $data['is_org_admin'] : false;
        $this->container['healthcare_enabled'] = isset($data['healthcare_enabled']) ? $data['healthcare_enabled'] : true;
        $this->container['dependent_care_enabled'] = isset($data['dependent_care_enabled']) ? $data['dependent_care_enabled'] : true;
        $this->container['unified_billing'] = isset($data['unified_billing']) ? $data['unified_billing'] : null;
        $this->container['cafeteria_plan'] = isset($data['cafeteria_plan']) ? $data['cafeteria_plan'] : null;
        $this->container['signup_source'] = isset($data['signup_source']) ? $data['signup_source'] : 'internal';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets onboarding_status
     *
     * @return string
     */
    public function getOnboardingStatus()
    {
        return $this->container['onboarding_status'];
    }

    /**
     * Sets onboarding_status
     *
     * @param string $onboarding_status Onboarding Status
     *
     * @return $this
     */
    public function setOnboardingStatus($onboarding_status)
    {
        $this->container['onboarding_status'] = $onboarding_status;

        return $this;
    }

    /**
     * Gets is_org_admin
     *
     * @return bool
     */
    public function getIsOrgAdmin()
    {
        return $this->container['is_org_admin'];
    }

    /**
     * Sets is_org_admin
     *
     * @param bool $is_org_admin Whether user is org admin
     *
     * @return $this
     */
    public function setIsOrgAdmin($is_org_admin)
    {
        $this->container['is_org_admin'] = $is_org_admin;

        return $this;
    }

    /**
     * Gets healthcare_enabled
     *
     * @return bool
     */
    public function getHealthcareEnabled()
    {
        return $this->container['healthcare_enabled'];
    }

    /**
     * Sets healthcare_enabled
     *
     * @param bool $healthcare_enabled Whether org has healthcare enabled
     *
     * @return $this
     */
    public function setHealthcareEnabled($healthcare_enabled)
    {
        $this->container['healthcare_enabled'] = $healthcare_enabled;

        return $this;
    }

    /**
     * Gets dependent_care_enabled
     *
     * @return bool
     */
    public function getDependentCareEnabled()
    {
        return $this->container['dependent_care_enabled'];
    }

    /**
     * Sets dependent_care_enabled
     *
     * @param bool $dependent_care_enabled Whether org has dependent care enabled
     *
     * @return $this
     */
    public function setDependentCareEnabled($dependent_care_enabled)
    {
        $this->container['dependent_care_enabled'] = $dependent_care_enabled;

        return $this;
    }

    /**
     * Gets unified_billing
     *
     * @return bool
     */
    public function getUnifiedBilling()
    {
        return $this->container['unified_billing'];
    }

    /**
     * Sets unified_billing
     *
     * @param bool $unified_billing Whether org has unified billing
     *
     * @return $this
     */
    public function setUnifiedBilling($unified_billing)
    {
        $this->container['unified_billing'] = $unified_billing;

        return $this;
    }

    /**
     * Gets cafeteria_plan
     *
     * @return \Swagger\Client\Model\DocumentEntity
     */
    public function getCafeteriaPlan()
    {
        return $this->container['cafeteria_plan'];
    }

    /**
     * Sets cafeteria_plan
     *
     * @param \Swagger\Client\Model\DocumentEntity $cafeteria_plan cafeteria_plan
     *
     * @return $this
     */
    public function setCafeteriaPlan($cafeteria_plan)
    {
        $this->container['cafeteria_plan'] = $cafeteria_plan;

        return $this;
    }

    /**
     * Gets signup_source
     *
     * @return string
     */
    public function getSignupSource()
    {
        return $this->container['signup_source'];
    }

    /**
     * Sets signup_source
     *
     * @param string $signup_source Where the signup came from
     *
     * @return $this
     */
    public function setSignupSource($signup_source)
    {
        $this->container['signup_source'] = $signup_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
