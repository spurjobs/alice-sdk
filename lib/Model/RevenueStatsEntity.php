<?php
/**
 * RevenueStatsEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RevenueStatsEntity Class Doc Comment
 *
 * @category Class
 * @description stats on revenue earned over a period of time
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RevenueStatsEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RevenueStatsEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'start_date' => '\DateTime',
'end_date' => '\DateTime',
'revenue' => 'float',
'revenue_last_month' => 'float',
'revenue_next_30_days' => 'float',
'average_days_until_revenue' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'start_date' => 'date',
'end_date' => 'date',
'revenue' => 'float',
'revenue_last_month' => 'float',
'revenue_next_30_days' => 'float',
'average_days_until_revenue' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'start_date' => 'start_date',
'end_date' => 'end_date',
'revenue' => 'revenue',
'revenue_last_month' => 'revenue_last_month',
'revenue_next_30_days' => 'revenue_next_30_days',
'average_days_until_revenue' => 'average_days_until_revenue'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'start_date' => 'setStartDate',
'end_date' => 'setEndDate',
'revenue' => 'setRevenue',
'revenue_last_month' => 'setRevenueLastMonth',
'revenue_next_30_days' => 'setRevenueNext30Days',
'average_days_until_revenue' => 'setAverageDaysUntilRevenue'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'start_date' => 'getStartDate',
'end_date' => 'getEndDate',
'revenue' => 'getRevenue',
'revenue_last_month' => 'getRevenueLastMonth',
'revenue_next_30_days' => 'getRevenueNext30Days',
'average_days_until_revenue' => 'getAverageDaysUntilRevenue'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['revenue'] = isset($data['revenue']) ? $data['revenue'] : 25024.88;
        $this->container['revenue_last_month'] = isset($data['revenue_last_month']) ? $data['revenue_last_month'] : 32194.72;
        $this->container['revenue_next_30_days'] = isset($data['revenue_next_30_days']) ? $data['revenue_next_30_days'] : 31842.01;
        $this->container['average_days_until_revenue'] = isset($data['average_days_until_revenue']) ? $data['average_days_until_revenue'] : 34;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Period start date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Period end date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets revenue
     *
     * @return float
     */
    public function getRevenue()
    {
        return $this->container['revenue'];
    }

    /**
     * Sets revenue
     *
     * @param float $revenue Revenue earned between the start and end dates
     *
     * @return $this
     */
    public function setRevenue($revenue)
    {
        $this->container['revenue'] = $revenue;

        return $this;
    }

    /**
     * Gets revenue_last_month
     *
     * @return float
     */
    public function getRevenueLastMonth()
    {
        return $this->container['revenue_last_month'];
    }

    /**
     * Sets revenue_last_month
     *
     * @param float $revenue_last_month Revenue earned last month with respect to the end date
     *
     * @return $this
     */
    public function setRevenueLastMonth($revenue_last_month)
    {
        $this->container['revenue_last_month'] = $revenue_last_month;

        return $this;
    }

    /**
     * Gets revenue_next_30_days
     *
     * @return float
     */
    public function getRevenueNext30Days()
    {
        return $this->container['revenue_next_30_days'];
    }

    /**
     * Sets revenue_next_30_days
     *
     * @param float $revenue_next_30_days Revenue earned in the last 30 days with respect to the end date
     *
     * @return $this
     */
    public function setRevenueNext30Days($revenue_next_30_days)
    {
        $this->container['revenue_next_30_days'] = $revenue_next_30_days;

        return $this;
    }

    /**
     * Gets average_days_until_revenue
     *
     * @return int
     */
    public function getAverageDaysUntilRevenue()
    {
        return $this->container['average_days_until_revenue'];
    }

    /**
     * Sets average_days_until_revenue
     *
     * @param int $average_days_until_revenue Average amount of days until Alice receives revenue from an employee
     *
     * @return $this
     */
    public function setAverageDaysUntilRevenue($average_days_until_revenue)
    {
        $this->container['average_days_until_revenue'] = $average_days_until_revenue;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
