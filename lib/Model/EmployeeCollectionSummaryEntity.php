<?php
/**
 * EmployeeCollectionSummaryEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeCollectionSummaryEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeCollectionSummaryEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeCollectionSummaryEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'employee_count' => 'int',
'enrolled' => 'int',
'enrolling' => 'int',
'invited' => 'int',
'not_invited' => 'int',
'opted_out' => 'int',
'terminated' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'employee_count' => 'int32',
'enrolled' => 'int32',
'enrolling' => 'int32',
'invited' => 'int32',
'not_invited' => 'int32',
'opted_out' => 'int32',
'terminated' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'employee_count' => 'employee_count',
'enrolled' => 'enrolled',
'enrolling' => 'enrolling',
'invited' => 'invited',
'not_invited' => 'not_invited',
'opted_out' => 'opted_out',
'terminated' => 'terminated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'employee_count' => 'setEmployeeCount',
'enrolled' => 'setEnrolled',
'enrolling' => 'setEnrolling',
'invited' => 'setInvited',
'not_invited' => 'setNotInvited',
'opted_out' => 'setOptedOut',
'terminated' => 'setTerminated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'employee_count' => 'getEmployeeCount',
'enrolled' => 'getEnrolled',
'enrolling' => 'getEnrolling',
'invited' => 'getInvited',
'not_invited' => 'getNotInvited',
'opted_out' => 'getOptedOut',
'terminated' => 'getTerminated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['employee_count'] = isset($data['employee_count']) ? $data['employee_count'] : 10;
        $this->container['enrolled'] = isset($data['enrolled']) ? $data['enrolled'] : 7;
        $this->container['enrolling'] = isset($data['enrolling']) ? $data['enrolling'] : 1;
        $this->container['invited'] = isset($data['invited']) ? $data['invited'] : 1;
        $this->container['not_invited'] = isset($data['not_invited']) ? $data['not_invited'] : 1;
        $this->container['opted_out'] = isset($data['opted_out']) ? $data['opted_out'] : 1;
        $this->container['terminated'] = isset($data['terminated']) ? $data['terminated'] : 1;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['employee_count'] === null) {
            $invalidProperties[] = "'employee_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets employee_count
     *
     * @return int
     */
    public function getEmployeeCount()
    {
        return $this->container['employee_count'];
    }

    /**
     * Sets employee_count
     *
     * @param int $employee_count Number of employees represented in this collection
     *
     * @return $this
     */
    public function setEmployeeCount($employee_count)
    {
        $this->container['employee_count'] = $employee_count;

        return $this;
    }

    /**
     * Gets enrolled
     *
     * @return int
     */
    public function getEnrolled()
    {
        return $this->container['enrolled'];
    }

    /**
     * Sets enrolled
     *
     * @param int $enrolled Number of enrolled employees in collection
     *
     * @return $this
     */
    public function setEnrolled($enrolled)
    {
        $this->container['enrolled'] = $enrolled;

        return $this;
    }

    /**
     * Gets enrolling
     *
     * @return int
     */
    public function getEnrolling()
    {
        return $this->container['enrolling'];
    }

    /**
     * Sets enrolling
     *
     * @param int $enrolling Number of employees in collection that are midway through enrolling
     *
     * @return $this
     */
    public function setEnrolling($enrolling)
    {
        $this->container['enrolling'] = $enrolling;

        return $this;
    }

    /**
     * Gets invited
     *
     * @return int
     */
    public function getInvited()
    {
        return $this->container['invited'];
    }

    /**
     * Sets invited
     *
     * @param int $invited Number of employees in collection that have been invited but not yet enrolled
     *
     * @return $this
     */
    public function setInvited($invited)
    {
        $this->container['invited'] = $invited;

        return $this;
    }

    /**
     * Gets not_invited
     *
     * @return int
     */
    public function getNotInvited()
    {
        return $this->container['not_invited'];
    }

    /**
     * Sets not_invited
     *
     * @param int $not_invited Number of employees in collection that haven't yet been invited
     *
     * @return $this
     */
    public function setNotInvited($not_invited)
    {
        $this->container['not_invited'] = $not_invited;

        return $this;
    }

    /**
     * Gets opted_out
     *
     * @return int
     */
    public function getOptedOut()
    {
        return $this->container['opted_out'];
    }

    /**
     * Sets opted_out
     *
     * @param int $opted_out Number of employees in collection that have opted out
     *
     * @return $this
     */
    public function setOptedOut($opted_out)
    {
        $this->container['opted_out'] = $opted_out;

        return $this;
    }

    /**
     * Gets terminated
     *
     * @return int
     */
    public function getTerminated()
    {
        return $this->container['terminated'];
    }

    /**
     * Sets terminated
     *
     * @param int $terminated Number of employees in collection that have been terminated
     *
     * @return $this
     */
    public function setTerminated($terminated)
    {
        $this->container['terminated'] = $terminated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
