<?php
/**
 * HSAProgramEnrollmentEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HSAProgramEnrollmentEntity Class Doc Comment
 *
 * @category Class
 * @description Set contribution limit
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HSAProgramEnrollmentEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HSAProgramEnrollmentEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'benefit_type' => 'string',
'estimated_savings_dollars' => 'float',
'total_spend_dollars' => 'float',
'id' => 'int',
'balance' => 'float',
'total_deductions' => 'float',
'total_deductions_and_balance' => 'float',
'yearly_limit' => 'float',
'estimated_yearly_limit_savings_dollars' => 'float',
'election' => 'float',
'preexisting_deduction' => 'float',
'unnetted_manual_deduction_dollars' => 'float',
'next_deposit_date' => '\DateTime',
'status' => 'string',
'has_additional_health_coverage' => 'bool',
'has_general_purpose_health_fsa' => 'bool',
'has_general_purpose_hra' => 'bool',
'eligible_for_medicare' => 'bool',
'claimed_as_dependent' => 'bool',
'estimated_yearly_limit' => 'float',
'permits_manual_deduction' => 'bool',
'election_per_pay_period_dollars' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'benefit_type' => null,
'estimated_savings_dollars' => 'float',
'total_spend_dollars' => 'float',
'id' => 'int32',
'balance' => 'float',
'total_deductions' => 'float',
'total_deductions_and_balance' => 'float',
'yearly_limit' => 'float',
'estimated_yearly_limit_savings_dollars' => 'float',
'election' => 'float',
'preexisting_deduction' => 'float',
'unnetted_manual_deduction_dollars' => 'float',
'next_deposit_date' => 'date',
'status' => null,
'has_additional_health_coverage' => null,
'has_general_purpose_health_fsa' => null,
'has_general_purpose_hra' => null,
'eligible_for_medicare' => null,
'claimed_as_dependent' => null,
'estimated_yearly_limit' => 'float',
'permits_manual_deduction' => null,
'election_per_pay_period_dollars' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'benefit_type' => 'benefit_type',
'estimated_savings_dollars' => 'estimated_savings_dollars',
'total_spend_dollars' => 'total_spend_dollars',
'id' => 'id',
'balance' => 'balance',
'total_deductions' => 'total_deductions',
'total_deductions_and_balance' => 'total_deductions_and_balance',
'yearly_limit' => 'yearly_limit',
'estimated_yearly_limit_savings_dollars' => 'estimated_yearly_limit_savings_dollars',
'election' => 'election',
'preexisting_deduction' => 'preexisting_deduction',
'unnetted_manual_deduction_dollars' => 'unnetted_manual_deduction_dollars',
'next_deposit_date' => 'next_deposit_date',
'status' => 'status',
'has_additional_health_coverage' => 'has_additional_health_coverage',
'has_general_purpose_health_fsa' => 'has_general_purpose_health_fsa',
'has_general_purpose_hra' => 'has_general_purpose_hra',
'eligible_for_medicare' => 'eligible_for_medicare',
'claimed_as_dependent' => 'claimed_as_dependent',
'estimated_yearly_limit' => 'estimated_yearly_limit',
'permits_manual_deduction' => 'permits_manual_deduction',
'election_per_pay_period_dollars' => 'election_per_pay_period_dollars'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'benefit_type' => 'setBenefitType',
'estimated_savings_dollars' => 'setEstimatedSavingsDollars',
'total_spend_dollars' => 'setTotalSpendDollars',
'id' => 'setId',
'balance' => 'setBalance',
'total_deductions' => 'setTotalDeductions',
'total_deductions_and_balance' => 'setTotalDeductionsAndBalance',
'yearly_limit' => 'setYearlyLimit',
'estimated_yearly_limit_savings_dollars' => 'setEstimatedYearlyLimitSavingsDollars',
'election' => 'setElection',
'preexisting_deduction' => 'setPreexistingDeduction',
'unnetted_manual_deduction_dollars' => 'setUnnettedManualDeductionDollars',
'next_deposit_date' => 'setNextDepositDate',
'status' => 'setStatus',
'has_additional_health_coverage' => 'setHasAdditionalHealthCoverage',
'has_general_purpose_health_fsa' => 'setHasGeneralPurposeHealthFsa',
'has_general_purpose_hra' => 'setHasGeneralPurposeHra',
'eligible_for_medicare' => 'setEligibleForMedicare',
'claimed_as_dependent' => 'setClaimedAsDependent',
'estimated_yearly_limit' => 'setEstimatedYearlyLimit',
'permits_manual_deduction' => 'setPermitsManualDeduction',
'election_per_pay_period_dollars' => 'setElectionPerPayPeriodDollars'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'benefit_type' => 'getBenefitType',
'estimated_savings_dollars' => 'getEstimatedSavingsDollars',
'total_spend_dollars' => 'getTotalSpendDollars',
'id' => 'getId',
'balance' => 'getBalance',
'total_deductions' => 'getTotalDeductions',
'total_deductions_and_balance' => 'getTotalDeductionsAndBalance',
'yearly_limit' => 'getYearlyLimit',
'estimated_yearly_limit_savings_dollars' => 'getEstimatedYearlyLimitSavingsDollars',
'election' => 'getElection',
'preexisting_deduction' => 'getPreexistingDeduction',
'unnetted_manual_deduction_dollars' => 'getUnnettedManualDeductionDollars',
'next_deposit_date' => 'getNextDepositDate',
'status' => 'getStatus',
'has_additional_health_coverage' => 'getHasAdditionalHealthCoverage',
'has_general_purpose_health_fsa' => 'getHasGeneralPurposeHealthFsa',
'has_general_purpose_hra' => 'getHasGeneralPurposeHra',
'eligible_for_medicare' => 'getEligibleForMedicare',
'claimed_as_dependent' => 'getClaimedAsDependent',
'estimated_yearly_limit' => 'getEstimatedYearlyLimit',
'permits_manual_deduction' => 'getPermitsManualDeduction',
'election_per_pay_period_dollars' => 'getElectionPerPayPeriodDollars'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : 'Mass Transit';
        $this->container['benefit_type'] = isset($data['benefit_type']) ? $data['benefit_type'] : 'mass_transit';
        $this->container['estimated_savings_dollars'] = isset($data['estimated_savings_dollars']) ? $data['estimated_savings_dollars'] : 290.77;
        $this->container['total_spend_dollars'] = isset($data['total_spend_dollars']) ? $data['total_spend_dollars'] : 590.77;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['balance'] = isset($data['balance']) ? $data['balance'] : 1000.0;
        $this->container['total_deductions'] = isset($data['total_deductions']) ? $data['total_deductions'] : 1000.0;
        $this->container['total_deductions_and_balance'] = isset($data['total_deductions_and_balance']) ? $data['total_deductions_and_balance'] : 1200.0;
        $this->container['yearly_limit'] = isset($data['yearly_limit']) ? $data['yearly_limit'] : 5000.0;
        $this->container['estimated_yearly_limit_savings_dollars'] = isset($data['estimated_yearly_limit_savings_dollars']) ? $data['estimated_yearly_limit_savings_dollars'] : 1000.0;
        $this->container['election'] = isset($data['election']) ? $data['election'] : 500.0;
        $this->container['preexisting_deduction'] = isset($data['preexisting_deduction']) ? $data['preexisting_deduction'] : 0.0;
        $this->container['unnetted_manual_deduction_dollars'] = isset($data['unnetted_manual_deduction_dollars']) ? $data['unnetted_manual_deduction_dollars'] : 1000.0;
        $this->container['next_deposit_date'] = isset($data['next_deposit_date']) ? $data['next_deposit_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : 'unopened';
        $this->container['has_additional_health_coverage'] = isset($data['has_additional_health_coverage']) ? $data['has_additional_health_coverage'] : null;
        $this->container['has_general_purpose_health_fsa'] = isset($data['has_general_purpose_health_fsa']) ? $data['has_general_purpose_health_fsa'] : null;
        $this->container['has_general_purpose_hra'] = isset($data['has_general_purpose_hra']) ? $data['has_general_purpose_hra'] : null;
        $this->container['eligible_for_medicare'] = isset($data['eligible_for_medicare']) ? $data['eligible_for_medicare'] : null;
        $this->container['claimed_as_dependent'] = isset($data['claimed_as_dependent']) ? $data['claimed_as_dependent'] : null;
        $this->container['estimated_yearly_limit'] = isset($data['estimated_yearly_limit']) ? $data['estimated_yearly_limit'] : 3400.0;
        $this->container['permits_manual_deduction'] = isset($data['permits_manual_deduction']) ? $data['permits_manual_deduction'] : null;
        $this->container['election_per_pay_period_dollars'] = isset($data['election_per_pay_period_dollars']) ? $data['election_per_pay_period_dollars'] : 100.0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['benefit_type'] === null) {
            $invalidProperties[] = "'benefit_type' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Human friendly name for the program
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets benefit_type
     *
     * @return string
     */
    public function getBenefitType()
    {
        return $this->container['benefit_type'];
    }

    /**
     * Sets benefit_type
     *
     * @param string $benefit_type benefit type
     *
     * @return $this
     */
    public function setBenefitType($benefit_type)
    {
        $this->container['benefit_type'] = $benefit_type;

        return $this;
    }

    /**
     * Gets estimated_savings_dollars
     *
     * @return float
     */
    public function getEstimatedSavingsDollars()
    {
        return $this->container['estimated_savings_dollars'];
    }

    /**
     * Sets estimated_savings_dollars
     *
     * @param float $estimated_savings_dollars Total Employee savings using this program since customer signed up
     *
     * @return $this
     */
    public function setEstimatedSavingsDollars($estimated_savings_dollars)
    {
        $this->container['estimated_savings_dollars'] = $estimated_savings_dollars;

        return $this;
    }

    /**
     * Gets total_spend_dollars
     *
     * @return float
     */
    public function getTotalSpendDollars()
    {
        return $this->container['total_spend_dollars'];
    }

    /**
     * Sets total_spend_dollars
     *
     * @param float $total_spend_dollars Total Employee pretax spending put through this program
     *
     * @return $this
     */
    public function setTotalSpendDollars($total_spend_dollars)
    {
        $this->container['total_spend_dollars'] = $total_spend_dollars;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Enrollment ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float $balance Total deductions minus total reimbursements (in dollars)
     *
     * @return $this
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets total_deductions
     *
     * @return float
     */
    public function getTotalDeductions()
    {
        return $this->container['total_deductions'];
    }

    /**
     * Sets total_deductions
     *
     * @param float $total_deductions Total deductions (in dollars)
     *
     * @return $this
     */
    public function setTotalDeductions($total_deductions)
    {
        $this->container['total_deductions'] = $total_deductions;

        return $this;
    }

    /**
     * Gets total_deductions_and_balance
     *
     * @return float
     */
    public function getTotalDeductionsAndBalance()
    {
        return $this->container['total_deductions_and_balance'];
    }

    /**
     * Sets total_deductions_and_balance
     *
     * @param float $total_deductions_and_balance Total deductions plus balance (in dollars)
     *
     * @return $this
     */
    public function setTotalDeductionsAndBalance($total_deductions_and_balance)
    {
        $this->container['total_deductions_and_balance'] = $total_deductions_and_balance;

        return $this;
    }

    /**
     * Gets yearly_limit
     *
     * @return float
     */
    public function getYearlyLimit()
    {
        return $this->container['yearly_limit'];
    }

    /**
     * Sets yearly_limit
     *
     * @param float $yearly_limit Annual spending cap (in dollars)
     *
     * @return $this
     */
    public function setYearlyLimit($yearly_limit)
    {
        $this->container['yearly_limit'] = $yearly_limit;

        return $this;
    }

    /**
     * Gets estimated_yearly_limit_savings_dollars
     *
     * @return float
     */
    public function getEstimatedYearlyLimitSavingsDollars()
    {
        return $this->container['estimated_yearly_limit_savings_dollars'];
    }

    /**
     * Sets estimated_yearly_limit_savings_dollars
     *
     * @param float $estimated_yearly_limit_savings_dollars Estimated savings for annual spending cap (in dollars)
     *
     * @return $this
     */
    public function setEstimatedYearlyLimitSavingsDollars($estimated_yearly_limit_savings_dollars)
    {
        $this->container['estimated_yearly_limit_savings_dollars'] = $estimated_yearly_limit_savings_dollars;

        return $this;
    }

    /**
     * Gets election
     *
     * @return float
     */
    public function getElection()
    {
        return $this->container['election'];
    }

    /**
     * Sets election
     *
     * @param float $election Election per pay period (in dollars)
     *
     * @return $this
     */
    public function setElection($election)
    {
        $this->container['election'] = $election;

        return $this;
    }

    /**
     * Gets preexisting_deduction
     *
     * @return float
     */
    public function getPreexistingDeduction()
    {
        return $this->container['preexisting_deduction'];
    }

    /**
     * Sets preexisting_deduction
     *
     * @param float $preexisting_deduction Contribution already made to benefit for the current year (in cents)
     *
     * @return $this
     */
    public function setPreexistingDeduction($preexisting_deduction)
    {
        $this->container['preexisting_deduction'] = $preexisting_deduction;

        return $this;
    }

    /**
     * Gets unnetted_manual_deduction_dollars
     *
     * @return float
     */
    public function getUnnettedManualDeductionDollars()
    {
        return $this->container['unnetted_manual_deduction_dollars'];
    }

    /**
     * Sets unnetted_manual_deduction_dollars
     *
     * @param float $unnetted_manual_deduction_dollars (in dollars)
     *
     * @return $this
     */
    public function setUnnettedManualDeductionDollars($unnetted_manual_deduction_dollars)
    {
        $this->container['unnetted_manual_deduction_dollars'] = $unnetted_manual_deduction_dollars;

        return $this;
    }

    /**
     * Gets next_deposit_date
     *
     * @return \DateTime
     */
    public function getNextDepositDate()
    {
        return $this->container['next_deposit_date'];
    }

    /**
     * Sets next_deposit_date
     *
     * @param \DateTime $next_deposit_date HSA deposit date for the current pay period
     *
     * @return $this
     */
    public function setNextDepositDate($next_deposit_date)
    {
        $this->container['next_deposit_date'] = $next_deposit_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status Enrollment status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets has_additional_health_coverage
     *
     * @return bool
     */
    public function getHasAdditionalHealthCoverage()
    {
        return $this->container['has_additional_health_coverage'];
    }

    /**
     * Sets has_additional_health_coverage
     *
     * @param bool $has_additional_health_coverage Does employee have additional non-qualified health coverage, e.g. through a spouse
     *
     * @return $this
     */
    public function setHasAdditionalHealthCoverage($has_additional_health_coverage)
    {
        $this->container['has_additional_health_coverage'] = $has_additional_health_coverage;

        return $this;
    }

    /**
     * Gets has_general_purpose_health_fsa
     *
     * @return bool
     */
    public function getHasGeneralPurposeHealthFsa()
    {
        return $this->container['has_general_purpose_health_fsa'];
    }

    /**
     * Sets has_general_purpose_health_fsa
     *
     * @param bool $has_general_purpose_health_fsa Does employee have a general purpose health FSA
     *
     * @return $this
     */
    public function setHasGeneralPurposeHealthFsa($has_general_purpose_health_fsa)
    {
        $this->container['has_general_purpose_health_fsa'] = $has_general_purpose_health_fsa;

        return $this;
    }

    /**
     * Gets has_general_purpose_hra
     *
     * @return bool
     */
    public function getHasGeneralPurposeHra()
    {
        return $this->container['has_general_purpose_hra'];
    }

    /**
     * Sets has_general_purpose_hra
     *
     * @param bool $has_general_purpose_hra Does employee have a general purpose HRA
     *
     * @return $this
     */
    public function setHasGeneralPurposeHra($has_general_purpose_hra)
    {
        $this->container['has_general_purpose_hra'] = $has_general_purpose_hra;

        return $this;
    }

    /**
     * Gets eligible_for_medicare
     *
     * @return bool
     */
    public function getEligibleForMedicare()
    {
        return $this->container['eligible_for_medicare'];
    }

    /**
     * Sets eligible_for_medicare
     *
     * @param bool $eligible_for_medicare Is employee eligible for medicare
     *
     * @return $this
     */
    public function setEligibleForMedicare($eligible_for_medicare)
    {
        $this->container['eligible_for_medicare'] = $eligible_for_medicare;

        return $this;
    }

    /**
     * Gets claimed_as_dependent
     *
     * @return bool
     */
    public function getClaimedAsDependent()
    {
        return $this->container['claimed_as_dependent'];
    }

    /**
     * Sets claimed_as_dependent
     *
     * @param bool $claimed_as_dependent Can the employee be claimed as a dependent on someone else's tax return
     *
     * @return $this
     */
    public function setClaimedAsDependent($claimed_as_dependent)
    {
        $this->container['claimed_as_dependent'] = $claimed_as_dependent;

        return $this;
    }

    /**
     * Gets estimated_yearly_limit
     *
     * @return float
     */
    public function getEstimatedYearlyLimit()
    {
        return $this->container['estimated_yearly_limit'];
    }

    /**
     * Sets estimated_yearly_limit
     *
     * @param float $estimated_yearly_limit Estimated yearly limit, will be same as actual if employee is enrolled
     *
     * @return $this
     */
    public function setEstimatedYearlyLimit($estimated_yearly_limit)
    {
        $this->container['estimated_yearly_limit'] = $estimated_yearly_limit;

        return $this;
    }

    /**
     * Gets permits_manual_deduction
     *
     * @return bool
     */
    public function getPermitsManualDeduction()
    {
        return $this->container['permits_manual_deduction'];
    }

    /**
     * Sets permits_manual_deduction
     *
     * @param bool $permits_manual_deduction Whether or not employee can make a manual deduction
     *
     * @return $this
     */
    public function setPermitsManualDeduction($permits_manual_deduction)
    {
        $this->container['permits_manual_deduction'] = $permits_manual_deduction;

        return $this;
    }

    /**
     * Gets election_per_pay_period_dollars
     *
     * @return float
     */
    public function getElectionPerPayPeriodDollars()
    {
        return $this->container['election_per_pay_period_dollars'];
    }

    /**
     * Sets election_per_pay_period_dollars
     *
     * @param float $election_per_pay_period_dollars Election per pay period
     *
     * @return $this
     */
    public function setElectionPerPayPeriodDollars($election_per_pay_period_dollars)
    {
        $this->container['election_per_pay_period_dollars'] = $election_per_pay_period_dollars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
