<?php
/**
 * AccountManagementStatsEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AccountManagementStatsEntity Class Doc Comment
 *
 * @category Class
 * @description stats on the state of accounts across Alice
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountManagementStatsEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AccountManagementStatsEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'date' => '\DateTime',
'total_organizations' => 'int',
'total_organizations_billing_connected' => 'int',
'total_organizations_payroll_connected' => 'int',
'total_employers' => 'int',
'total_employers_account_manager_engaged' => 'int',
'total_employers_onboarding_completed' => 'int',
'total_employers_roster_attained' => 'int',
'total_employers_enrollment_started' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'date' => 'date',
'total_organizations' => 'int32',
'total_organizations_billing_connected' => 'int32',
'total_organizations_payroll_connected' => 'int32',
'total_employers' => 'int32',
'total_employers_account_manager_engaged' => 'int32',
'total_employers_onboarding_completed' => 'int32',
'total_employers_roster_attained' => 'int32',
'total_employers_enrollment_started' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'date' => 'date',
'total_organizations' => 'total_organizations',
'total_organizations_billing_connected' => 'total_organizations_billing_connected',
'total_organizations_payroll_connected' => 'total_organizations_payroll_connected',
'total_employers' => 'total_employers',
'total_employers_account_manager_engaged' => 'total_employers_account_manager_engaged',
'total_employers_onboarding_completed' => 'total_employers_onboarding_completed',
'total_employers_roster_attained' => 'total_employers_roster_attained',
'total_employers_enrollment_started' => 'total_employers_enrollment_started'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'date' => 'setDate',
'total_organizations' => 'setTotalOrganizations',
'total_organizations_billing_connected' => 'setTotalOrganizationsBillingConnected',
'total_organizations_payroll_connected' => 'setTotalOrganizationsPayrollConnected',
'total_employers' => 'setTotalEmployers',
'total_employers_account_manager_engaged' => 'setTotalEmployersAccountManagerEngaged',
'total_employers_onboarding_completed' => 'setTotalEmployersOnboardingCompleted',
'total_employers_roster_attained' => 'setTotalEmployersRosterAttained',
'total_employers_enrollment_started' => 'setTotalEmployersEnrollmentStarted'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'date' => 'getDate',
'total_organizations' => 'getTotalOrganizations',
'total_organizations_billing_connected' => 'getTotalOrganizationsBillingConnected',
'total_organizations_payroll_connected' => 'getTotalOrganizationsPayrollConnected',
'total_employers' => 'getTotalEmployers',
'total_employers_account_manager_engaged' => 'getTotalEmployersAccountManagerEngaged',
'total_employers_onboarding_completed' => 'getTotalEmployersOnboardingCompleted',
'total_employers_roster_attained' => 'getTotalEmployersRosterAttained',
'total_employers_enrollment_started' => 'getTotalEmployersEnrollmentStarted'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['total_organizations'] = isset($data['total_organizations']) ? $data['total_organizations'] : 35;
        $this->container['total_organizations_billing_connected'] = isset($data['total_organizations_billing_connected']) ? $data['total_organizations_billing_connected'] : 23;
        $this->container['total_organizations_payroll_connected'] = isset($data['total_organizations_payroll_connected']) ? $data['total_organizations_payroll_connected'] : 22;
        $this->container['total_employers'] = isset($data['total_employers']) ? $data['total_employers'] : 50;
        $this->container['total_employers_account_manager_engaged'] = isset($data['total_employers_account_manager_engaged']) ? $data['total_employers_account_manager_engaged'] : 45;
        $this->container['total_employers_onboarding_completed'] = isset($data['total_employers_onboarding_completed']) ? $data['total_employers_onboarding_completed'] : 40;
        $this->container['total_employers_roster_attained'] = isset($data['total_employers_roster_attained']) ? $data['total_employers_roster_attained'] : 28;
        $this->container['total_employers_enrollment_started'] = isset($data['total_employers_enrollment_started']) ? $data['total_employers_enrollment_started'] : 17;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Date these stats relate to
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets total_organizations
     *
     * @return int
     */
    public function getTotalOrganizations()
    {
        return $this->container['total_organizations'];
    }

    /**
     * Sets total_organizations
     *
     * @param int $total_organizations Total number of organizations in Tilda
     *
     * @return $this
     */
    public function setTotalOrganizations($total_organizations)
    {
        $this->container['total_organizations'] = $total_organizations;

        return $this;
    }

    /**
     * Gets total_organizations_billing_connected
     *
     * @return int
     */
    public function getTotalOrganizationsBillingConnected()
    {
        return $this->container['total_organizations_billing_connected'];
    }

    /**
     * Sets total_organizations_billing_connected
     *
     * @param int $total_organizations_billing_connected Total number of organizations in the system with billing connected at either the org level or at the employer level
     *
     * @return $this
     */
    public function setTotalOrganizationsBillingConnected($total_organizations_billing_connected)
    {
        $this->container['total_organizations_billing_connected'] = $total_organizations_billing_connected;

        return $this;
    }

    /**
     * Gets total_organizations_payroll_connected
     *
     * @return int
     */
    public function getTotalOrganizationsPayrollConnected()
    {
        return $this->container['total_organizations_payroll_connected'];
    }

    /**
     * Sets total_organizations_payroll_connected
     *
     * @param int $total_organizations_payroll_connected Total number of organizations with payroll connected
     *
     * @return $this
     */
    public function setTotalOrganizationsPayrollConnected($total_organizations_payroll_connected)
    {
        $this->container['total_organizations_payroll_connected'] = $total_organizations_payroll_connected;

        return $this;
    }

    /**
     * Gets total_employers
     *
     * @return int
     */
    public function getTotalEmployers()
    {
        return $this->container['total_employers'];
    }

    /**
     * Sets total_employers
     *
     * @param int $total_employers Total number of employers in Tilda
     *
     * @return $this
     */
    public function setTotalEmployers($total_employers)
    {
        $this->container['total_employers'] = $total_employers;

        return $this;
    }

    /**
     * Gets total_employers_account_manager_engaged
     *
     * @return int
     */
    public function getTotalEmployersAccountManagerEngaged()
    {
        return $this->container['total_employers_account_manager_engaged'];
    }

    /**
     * Sets total_employers_account_manager_engaged
     *
     * @param int $total_employers_account_manager_engaged Total number of employers that account manager has engaged with
     *
     * @return $this
     */
    public function setTotalEmployersAccountManagerEngaged($total_employers_account_manager_engaged)
    {
        $this->container['total_employers_account_manager_engaged'] = $total_employers_account_manager_engaged;

        return $this;
    }

    /**
     * Gets total_employers_onboarding_completed
     *
     * @return int
     */
    public function getTotalEmployersOnboardingCompleted()
    {
        return $this->container['total_employers_onboarding_completed'];
    }

    /**
     * Sets total_employers_onboarding_completed
     *
     * @param int $total_employers_onboarding_completed Total number of employers that have completed the onboarding process with AM
     *
     * @return $this
     */
    public function setTotalEmployersOnboardingCompleted($total_employers_onboarding_completed)
    {
        $this->container['total_employers_onboarding_completed'] = $total_employers_onboarding_completed;

        return $this;
    }

    /**
     * Gets total_employers_roster_attained
     *
     * @return int
     */
    public function getTotalEmployersRosterAttained()
    {
        return $this->container['total_employers_roster_attained'];
    }

    /**
     * Sets total_employers_roster_attained
     *
     * @param int $total_employers_roster_attained Total number of employers with roster attained
     *
     * @return $this
     */
    public function setTotalEmployersRosterAttained($total_employers_roster_attained)
    {
        $this->container['total_employers_roster_attained'] = $total_employers_roster_attained;

        return $this;
    }

    /**
     * Gets total_employers_enrollment_started
     *
     * @return int
     */
    public function getTotalEmployersEnrollmentStarted()
    {
        return $this->container['total_employers_enrollment_started'];
    }

    /**
     * Sets total_employers_enrollment_started
     *
     * @param int $total_employers_enrollment_started Total number of employers who have started enrollment
     *
     * @return $this
     */
    public function setTotalEmployersEnrollmentStarted($total_employers_enrollment_started)
    {
        $this->container['total_employers_enrollment_started'] = $total_employers_enrollment_started;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
