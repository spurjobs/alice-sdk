<?php
/**
 * EmployeeBenefitsEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeBenefitsEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeBenefitsEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeBenefitsEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'payroll_system_id' => 'string',
'first_name' => 'string',
'last_name' => 'string',
'account_status' => 'string',
'is_admin_user' => 'bool',
'is_organization_admin' => 'bool',
'benefits' => '\Swagger\Client\Model\EmployeePayPeriodRecordEntity[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
'payroll_system_id' => null,
'first_name' => null,
'last_name' => null,
'account_status' => null,
'is_admin_user' => null,
'is_organization_admin' => null,
'benefits' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'payroll_system_id' => 'payroll_system_id',
'first_name' => 'first_name',
'last_name' => 'last_name',
'account_status' => 'account_status',
'is_admin_user' => 'is_admin_user',
'is_organization_admin' => 'is_organization_admin',
'benefits' => 'benefits'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'payroll_system_id' => 'setPayrollSystemId',
'first_name' => 'setFirstName',
'last_name' => 'setLastName',
'account_status' => 'setAccountStatus',
'is_admin_user' => 'setIsAdminUser',
'is_organization_admin' => 'setIsOrganizationAdmin',
'benefits' => 'setBenefits'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'payroll_system_id' => 'getPayrollSystemId',
'first_name' => 'getFirstName',
'last_name' => 'getLastName',
'account_status' => 'getAccountStatus',
'is_admin_user' => 'getIsAdminUser',
'is_organization_admin' => 'getIsOrganizationAdmin',
'benefits' => 'getBenefits'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACCOUNT_STATUS_ENROLLED = 'enrolled';
const ACCOUNT_STATUS_OPTED_OUT = 'opted_out';
const ACCOUNT_STATUS_NOT_ENROLLED = 'not_enrolled';
const ACCOUNT_STATUS_INELIGIBLE = 'ineligible';
const ACCOUNT_STATUS_TERMINATED = 'terminated';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStatusAllowableValues()
    {
        return [
            self::ACCOUNT_STATUS_ENROLLED,
self::ACCOUNT_STATUS_OPTED_OUT,
self::ACCOUNT_STATUS_NOT_ENROLLED,
self::ACCOUNT_STATUS_INELIGIBLE,
self::ACCOUNT_STATUS_TERMINATED,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['payroll_system_id'] = isset($data['payroll_system_id']) ? $data['payroll_system_id'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['account_status'] = isset($data['account_status']) ? $data['account_status'] : 'not_enrolled';
        $this->container['is_admin_user'] = isset($data['is_admin_user']) ? $data['is_admin_user'] : null;
        $this->container['is_organization_admin'] = isset($data['is_organization_admin']) ? $data['is_organization_admin'] : null;
        $this->container['benefits'] = isset($data['benefits']) ? $data['benefits'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['payroll_system_id'] === null) {
            $invalidProperties[] = "'payroll_system_id' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['account_status'] === null) {
            $invalidProperties[] = "'account_status' can't be null";
        }
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($this->container['account_status']) && !in_array($this->container['account_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['is_admin_user'] === null) {
            $invalidProperties[] = "'is_admin_user' can't be null";
        }
        if ($this->container['is_organization_admin'] === null) {
            $invalidProperties[] = "'is_organization_admin' can't be null";
        }
        if ($this->container['benefits'] === null) {
            $invalidProperties[] = "'benefits' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Employee ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets payroll_system_id
     *
     * @return string
     */
    public function getPayrollSystemId()
    {
        return $this->container['payroll_system_id'];
    }

    /**
     * Sets payroll_system_id
     *
     * @param string $payroll_system_id Employee ID within the external payroll system
     *
     * @return $this
     */
    public function setPayrollSystemId($payroll_system_id)
    {
        $this->container['payroll_system_id'] = $payroll_system_id;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First Name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name First Name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets account_status
     *
     * @return string
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string $account_status Status of the account
     *
     * @return $this
     */
    public function setAccountStatus($account_status)
    {
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!in_array($account_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets is_admin_user
     *
     * @return bool
     */
    public function getIsAdminUser()
    {
        return $this->container['is_admin_user'];
    }

    /**
     * Sets is_admin_user
     *
     * @param bool $is_admin_user Identifies if employee can administer Employer Account
     *
     * @return $this
     */
    public function setIsAdminUser($is_admin_user)
    {
        $this->container['is_admin_user'] = $is_admin_user;

        return $this;
    }

    /**
     * Gets is_organization_admin
     *
     * @return bool
     */
    public function getIsOrganizationAdmin()
    {
        return $this->container['is_organization_admin'];
    }

    /**
     * Sets is_organization_admin
     *
     * @param bool $is_organization_admin Identifies if employee can administer their organization
     *
     * @return $this
     */
    public function setIsOrganizationAdmin($is_organization_admin)
    {
        $this->container['is_organization_admin'] = $is_organization_admin;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return \Swagger\Client\Model\EmployeePayPeriodRecordEntity[]
     */
    public function getBenefits()
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param \Swagger\Client\Model\EmployeePayPeriodRecordEntity[] $benefits Employee's pay period records
     *
     * @return $this
     */
    public function setBenefits($benefits)
    {
        $this->container['benefits'] = $benefits;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
