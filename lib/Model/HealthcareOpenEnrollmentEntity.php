<?php
/**
 * HealthcareOpenEnrollmentEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HealthcareOpenEnrollmentEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HealthcareOpenEnrollmentEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HealthcareOpenEnrollmentEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'completed_next_year_enrollment' => 'bool',
'enrollment_period_end_date' => '\DateTime',
'open_enrollment' => 'bool',
'expected_savings' => 'float',
'enrollment' => '\Swagger\Client\Model\HealthcareFSAProgramEnrollmentEntity'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'completed_next_year_enrollment' => null,
'enrollment_period_end_date' => 'date',
'open_enrollment' => null,
'expected_savings' => 'float',
'enrollment' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'completed_next_year_enrollment' => 'completed_next_year_enrollment',
'enrollment_period_end_date' => 'enrollment_period_end_date',
'open_enrollment' => 'open_enrollment',
'expected_savings' => 'expected_savings',
'enrollment' => 'enrollment'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'completed_next_year_enrollment' => 'setCompletedNextYearEnrollment',
'enrollment_period_end_date' => 'setEnrollmentPeriodEndDate',
'open_enrollment' => 'setOpenEnrollment',
'expected_savings' => 'setExpectedSavings',
'enrollment' => 'setEnrollment'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'completed_next_year_enrollment' => 'getCompletedNextYearEnrollment',
'enrollment_period_end_date' => 'getEnrollmentPeriodEndDate',
'open_enrollment' => 'getOpenEnrollment',
'expected_savings' => 'getExpectedSavings',
'enrollment' => 'getEnrollment'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['completed_next_year_enrollment'] = isset($data['completed_next_year_enrollment']) ? $data['completed_next_year_enrollment'] : null;
        $this->container['enrollment_period_end_date'] = isset($data['enrollment_period_end_date']) ? $data['enrollment_period_end_date'] : null;
        $this->container['open_enrollment'] = isset($data['open_enrollment']) ? $data['open_enrollment'] : null;
        $this->container['expected_savings'] = isset($data['expected_savings']) ? $data['expected_savings'] : 2500.0;
        $this->container['enrollment'] = isset($data['enrollment']) ? $data['enrollment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets completed_next_year_enrollment
     *
     * @return bool
     */
    public function getCompletedNextYearEnrollment()
    {
        return $this->container['completed_next_year_enrollment'];
    }

    /**
     * Sets completed_next_year_enrollment
     *
     * @param bool $completed_next_year_enrollment Is user already enrolled for next year?
     *
     * @return $this
     */
    public function setCompletedNextYearEnrollment($completed_next_year_enrollment)
    {
        $this->container['completed_next_year_enrollment'] = $completed_next_year_enrollment;

        return $this;
    }

    /**
     * Gets enrollment_period_end_date
     *
     * @return \DateTime
     */
    public function getEnrollmentPeriodEndDate()
    {
        return $this->container['enrollment_period_end_date'];
    }

    /**
     * Sets enrollment_period_end_date
     *
     * @param \DateTime $enrollment_period_end_date Enrollment peirod end date, may be nil if not in enrollment
     *
     * @return $this
     */
    public function setEnrollmentPeriodEndDate($enrollment_period_end_date)
    {
        $this->container['enrollment_period_end_date'] = $enrollment_period_end_date;

        return $this;
    }

    /**
     * Gets open_enrollment
     *
     * @return bool
     */
    public function getOpenEnrollment()
    {
        return $this->container['open_enrollment'];
    }

    /**
     * Sets open_enrollment
     *
     * @param bool $open_enrollment Is the user currently in open enrollment?
     *
     * @return $this
     */
    public function setOpenEnrollment($open_enrollment)
    {
        $this->container['open_enrollment'] = $open_enrollment;

        return $this;
    }

    /**
     * Gets expected_savings
     *
     * @return float
     */
    public function getExpectedSavings()
    {
        return $this->container['expected_savings'];
    }

    /**
     * Sets expected_savings
     *
     * @param float $expected_savings How much we estimate the user could save
     *
     * @return $this
     */
    public function setExpectedSavings($expected_savings)
    {
        $this->container['expected_savings'] = $expected_savings;

        return $this;
    }

    /**
     * Gets enrollment
     *
     * @return \Swagger\Client\Model\HealthcareFSAProgramEnrollmentEntity
     */
    public function getEnrollment()
    {
        return $this->container['enrollment'];
    }

    /**
     * Sets enrollment
     *
     * @param \Swagger\Client\Model\HealthcareFSAProgramEnrollmentEntity $enrollment enrollment
     *
     * @return $this
     */
    public function setEnrollment($enrollment)
    {
        $this->container['enrollment'] = $enrollment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
