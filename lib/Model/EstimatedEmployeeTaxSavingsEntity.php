<?php
/**
 * EstimatedEmployeeTaxSavingsEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EstimatedEmployeeTaxSavingsEntity Class Doc Comment
 *
 * @category Class
 * @description All parameters are optional and will default to sensible values.                   Note that the IRS rules allow someone to deduct dependent care                   greater than $417 in a month, up to the limit of $5000 in a year.                   However, as this is a monthly calculator, the maximum is capped at $417
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EstimatedEmployeeTaxSavingsEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EstimatedEmployeeTaxSavingsEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'annual_savings_dollars' => 'float',
'annual_dependent_care_savings_dollars' => 'float',
'income_dollars' => 'float',
'filing_status' => 'string',
'state' => 'string',
'city' => 'string',
'mass_transit_monthly_spend_dollars' => 'float',
'parking_monthly_spend_dollars' => 'float',
'ride_sharing_monthly_spend_dollars' => 'float',
'dependent_care_monthly_spend_dollars' => 'float',
'healthcare_monthly_spend_dollars' => 'float',
'max_mass_transit_monthly_dollars' => 'float',
'max_parking_monthly_dollars' => 'float',
'max_ride_sharing_monthly_dollars' => 'float',
'max_dependent_care_monthly_dollars' => 'float',
'max_healthcare_monthly_dollars' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'annual_savings_dollars' => 'float',
'annual_dependent_care_savings_dollars' => 'float',
'income_dollars' => 'float',
'filing_status' => null,
'state' => null,
'city' => null,
'mass_transit_monthly_spend_dollars' => 'float',
'parking_monthly_spend_dollars' => 'float',
'ride_sharing_monthly_spend_dollars' => 'float',
'dependent_care_monthly_spend_dollars' => 'float',
'healthcare_monthly_spend_dollars' => 'float',
'max_mass_transit_monthly_dollars' => 'float',
'max_parking_monthly_dollars' => 'float',
'max_ride_sharing_monthly_dollars' => 'float',
'max_dependent_care_monthly_dollars' => 'float',
'max_healthcare_monthly_dollars' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'annual_savings_dollars' => 'annual_savings_dollars',
'annual_dependent_care_savings_dollars' => 'annual_dependent_care_savings_dollars',
'income_dollars' => 'income_dollars',
'filing_status' => 'filing_status',
'state' => 'state',
'city' => 'city',
'mass_transit_monthly_spend_dollars' => 'mass_transit_monthly_spend_dollars',
'parking_monthly_spend_dollars' => 'parking_monthly_spend_dollars',
'ride_sharing_monthly_spend_dollars' => 'ride_sharing_monthly_spend_dollars',
'dependent_care_monthly_spend_dollars' => 'dependent_care_monthly_spend_dollars',
'healthcare_monthly_spend_dollars' => 'healthcare_monthly_spend_dollars',
'max_mass_transit_monthly_dollars' => 'max_mass_transit_monthly_dollars',
'max_parking_monthly_dollars' => 'max_parking_monthly_dollars',
'max_ride_sharing_monthly_dollars' => 'max_ride_sharing_monthly_dollars',
'max_dependent_care_monthly_dollars' => 'max_dependent_care_monthly_dollars',
'max_healthcare_monthly_dollars' => 'max_healthcare_monthly_dollars'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'annual_savings_dollars' => 'setAnnualSavingsDollars',
'annual_dependent_care_savings_dollars' => 'setAnnualDependentCareSavingsDollars',
'income_dollars' => 'setIncomeDollars',
'filing_status' => 'setFilingStatus',
'state' => 'setState',
'city' => 'setCity',
'mass_transit_monthly_spend_dollars' => 'setMassTransitMonthlySpendDollars',
'parking_monthly_spend_dollars' => 'setParkingMonthlySpendDollars',
'ride_sharing_monthly_spend_dollars' => 'setRideSharingMonthlySpendDollars',
'dependent_care_monthly_spend_dollars' => 'setDependentCareMonthlySpendDollars',
'healthcare_monthly_spend_dollars' => 'setHealthcareMonthlySpendDollars',
'max_mass_transit_monthly_dollars' => 'setMaxMassTransitMonthlyDollars',
'max_parking_monthly_dollars' => 'setMaxParkingMonthlyDollars',
'max_ride_sharing_monthly_dollars' => 'setMaxRideSharingMonthlyDollars',
'max_dependent_care_monthly_dollars' => 'setMaxDependentCareMonthlyDollars',
'max_healthcare_monthly_dollars' => 'setMaxHealthcareMonthlyDollars'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'annual_savings_dollars' => 'getAnnualSavingsDollars',
'annual_dependent_care_savings_dollars' => 'getAnnualDependentCareSavingsDollars',
'income_dollars' => 'getIncomeDollars',
'filing_status' => 'getFilingStatus',
'state' => 'getState',
'city' => 'getCity',
'mass_transit_monthly_spend_dollars' => 'getMassTransitMonthlySpendDollars',
'parking_monthly_spend_dollars' => 'getParkingMonthlySpendDollars',
'ride_sharing_monthly_spend_dollars' => 'getRideSharingMonthlySpendDollars',
'dependent_care_monthly_spend_dollars' => 'getDependentCareMonthlySpendDollars',
'healthcare_monthly_spend_dollars' => 'getHealthcareMonthlySpendDollars',
'max_mass_transit_monthly_dollars' => 'getMaxMassTransitMonthlyDollars',
'max_parking_monthly_dollars' => 'getMaxParkingMonthlyDollars',
'max_ride_sharing_monthly_dollars' => 'getMaxRideSharingMonthlyDollars',
'max_dependent_care_monthly_dollars' => 'getMaxDependentCareMonthlyDollars',
'max_healthcare_monthly_dollars' => 'getMaxHealthcareMonthlyDollars'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['annual_savings_dollars'] = isset($data['annual_savings_dollars']) ? $data['annual_savings_dollars'] : 403.2;
        $this->container['annual_dependent_care_savings_dollars'] = isset($data['annual_dependent_care_savings_dollars']) ? $data['annual_dependent_care_savings_dollars'] : 1200.2;
        $this->container['income_dollars'] = isset($data['income_dollars']) ? $data['income_dollars'] : 51939.0;
        $this->container['filing_status'] = isset($data['filing_status']) ? $data['filing_status'] : 'single';
        $this->container['state'] = isset($data['state']) ? $data['state'] : 'ny';
        $this->container['city'] = isset($data['city']) ? $data['city'] : 'new_york';
        $this->container['mass_transit_monthly_spend_dollars'] = isset($data['mass_transit_monthly_spend_dollars']) ? $data['mass_transit_monthly_spend_dollars'] : 116.5;
        $this->container['parking_monthly_spend_dollars'] = isset($data['parking_monthly_spend_dollars']) ? $data['parking_monthly_spend_dollars'] : 10.0;
        $this->container['ride_sharing_monthly_spend_dollars'] = isset($data['ride_sharing_monthly_spend_dollars']) ? $data['ride_sharing_monthly_spend_dollars'] : 20.0;
        $this->container['dependent_care_monthly_spend_dollars'] = isset($data['dependent_care_monthly_spend_dollars']) ? $data['dependent_care_monthly_spend_dollars'] : 417.0;
        $this->container['healthcare_monthly_spend_dollars'] = isset($data['healthcare_monthly_spend_dollars']) ? $data['healthcare_monthly_spend_dollars'] : 95.0;
        $this->container['max_mass_transit_monthly_dollars'] = isset($data['max_mass_transit_monthly_dollars']) ? $data['max_mass_transit_monthly_dollars'] : 260.0;
        $this->container['max_parking_monthly_dollars'] = isset($data['max_parking_monthly_dollars']) ? $data['max_parking_monthly_dollars'] : 260.0;
        $this->container['max_ride_sharing_monthly_dollars'] = isset($data['max_ride_sharing_monthly_dollars']) ? $data['max_ride_sharing_monthly_dollars'] : 260.0;
        $this->container['max_dependent_care_monthly_dollars'] = isset($data['max_dependent_care_monthly_dollars']) ? $data['max_dependent_care_monthly_dollars'] : 417.0;
        $this->container['max_healthcare_monthly_dollars'] = isset($data['max_healthcare_monthly_dollars']) ? $data['max_healthcare_monthly_dollars'] : 283.0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets annual_savings_dollars
     *
     * @return float
     */
    public function getAnnualSavingsDollars()
    {
        return $this->container['annual_savings_dollars'];
    }

    /**
     * Sets annual_savings_dollars
     *
     * @param float $annual_savings_dollars Employees estimated annual savings
     *
     * @return $this
     */
    public function setAnnualSavingsDollars($annual_savings_dollars)
    {
        $this->container['annual_savings_dollars'] = $annual_savings_dollars;

        return $this;
    }

    /**
     * Gets annual_dependent_care_savings_dollars
     *
     * @return float
     */
    public function getAnnualDependentCareSavingsDollars()
    {
        return $this->container['annual_dependent_care_savings_dollars'];
    }

    /**
     * Sets annual_dependent_care_savings_dollars
     *
     * @param float $annual_dependent_care_savings_dollars Employees estimated annual dependent care savings
     *
     * @return $this
     */
    public function setAnnualDependentCareSavingsDollars($annual_dependent_care_savings_dollars)
    {
        $this->container['annual_dependent_care_savings_dollars'] = $annual_dependent_care_savings_dollars;

        return $this;
    }

    /**
     * Gets income_dollars
     *
     * @return float
     */
    public function getIncomeDollars()
    {
        return $this->container['income_dollars'];
    }

    /**
     * Sets income_dollars
     *
     * @param float $income_dollars Gross income
     *
     * @return $this
     */
    public function setIncomeDollars($income_dollars)
    {
        $this->container['income_dollars'] = $income_dollars;

        return $this;
    }

    /**
     * Gets filing_status
     *
     * @return string
     */
    public function getFilingStatus()
    {
        return $this->container['filing_status'];
    }

    /**
     * Sets filing_status
     *
     * @param string $filing_status Filing Status
     *
     * @return $this
     */
    public function setFilingStatus($filing_status)
    {
        $this->container['filing_status'] = $filing_status;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state State
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city Filing City
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets mass_transit_monthly_spend_dollars
     *
     * @return float
     */
    public function getMassTransitMonthlySpendDollars()
    {
        return $this->container['mass_transit_monthly_spend_dollars'];
    }

    /**
     * Sets mass_transit_monthly_spend_dollars
     *
     * @param float $mass_transit_monthly_spend_dollars Monthly spend on mass transit
     *
     * @return $this
     */
    public function setMassTransitMonthlySpendDollars($mass_transit_monthly_spend_dollars)
    {
        $this->container['mass_transit_monthly_spend_dollars'] = $mass_transit_monthly_spend_dollars;

        return $this;
    }

    /**
     * Gets parking_monthly_spend_dollars
     *
     * @return float
     */
    public function getParkingMonthlySpendDollars()
    {
        return $this->container['parking_monthly_spend_dollars'];
    }

    /**
     * Sets parking_monthly_spend_dollars
     *
     * @param float $parking_monthly_spend_dollars Monthly spend on parking
     *
     * @return $this
     */
    public function setParkingMonthlySpendDollars($parking_monthly_spend_dollars)
    {
        $this->container['parking_monthly_spend_dollars'] = $parking_monthly_spend_dollars;

        return $this;
    }

    /**
     * Gets ride_sharing_monthly_spend_dollars
     *
     * @return float
     */
    public function getRideSharingMonthlySpendDollars()
    {
        return $this->container['ride_sharing_monthly_spend_dollars'];
    }

    /**
     * Sets ride_sharing_monthly_spend_dollars
     *
     * @param float $ride_sharing_monthly_spend_dollars Monthly spend on ride sharing
     *
     * @return $this
     */
    public function setRideSharingMonthlySpendDollars($ride_sharing_monthly_spend_dollars)
    {
        $this->container['ride_sharing_monthly_spend_dollars'] = $ride_sharing_monthly_spend_dollars;

        return $this;
    }

    /**
     * Gets dependent_care_monthly_spend_dollars
     *
     * @return float
     */
    public function getDependentCareMonthlySpendDollars()
    {
        return $this->container['dependent_care_monthly_spend_dollars'];
    }

    /**
     * Sets dependent_care_monthly_spend_dollars
     *
     * @param float $dependent_care_monthly_spend_dollars Monthly spend on dependent care
     *
     * @return $this
     */
    public function setDependentCareMonthlySpendDollars($dependent_care_monthly_spend_dollars)
    {
        $this->container['dependent_care_monthly_spend_dollars'] = $dependent_care_monthly_spend_dollars;

        return $this;
    }

    /**
     * Gets healthcare_monthly_spend_dollars
     *
     * @return float
     */
    public function getHealthcareMonthlySpendDollars()
    {
        return $this->container['healthcare_monthly_spend_dollars'];
    }

    /**
     * Sets healthcare_monthly_spend_dollars
     *
     * @param float $healthcare_monthly_spend_dollars Monthly spend on healthcare
     *
     * @return $this
     */
    public function setHealthcareMonthlySpendDollars($healthcare_monthly_spend_dollars)
    {
        $this->container['healthcare_monthly_spend_dollars'] = $healthcare_monthly_spend_dollars;

        return $this;
    }

    /**
     * Gets max_mass_transit_monthly_dollars
     *
     * @return float
     */
    public function getMaxMassTransitMonthlyDollars()
    {
        return $this->container['max_mass_transit_monthly_dollars'];
    }

    /**
     * Sets max_mass_transit_monthly_dollars
     *
     * @param float $max_mass_transit_monthly_dollars Maximum Monthly spend on mass transit
     *
     * @return $this
     */
    public function setMaxMassTransitMonthlyDollars($max_mass_transit_monthly_dollars)
    {
        $this->container['max_mass_transit_monthly_dollars'] = $max_mass_transit_monthly_dollars;

        return $this;
    }

    /**
     * Gets max_parking_monthly_dollars
     *
     * @return float
     */
    public function getMaxParkingMonthlyDollars()
    {
        return $this->container['max_parking_monthly_dollars'];
    }

    /**
     * Sets max_parking_monthly_dollars
     *
     * @param float $max_parking_monthly_dollars Maximum Monthly spend on parking
     *
     * @return $this
     */
    public function setMaxParkingMonthlyDollars($max_parking_monthly_dollars)
    {
        $this->container['max_parking_monthly_dollars'] = $max_parking_monthly_dollars;

        return $this;
    }

    /**
     * Gets max_ride_sharing_monthly_dollars
     *
     * @return float
     */
    public function getMaxRideSharingMonthlyDollars()
    {
        return $this->container['max_ride_sharing_monthly_dollars'];
    }

    /**
     * Sets max_ride_sharing_monthly_dollars
     *
     * @param float $max_ride_sharing_monthly_dollars Maximum Monthly spend on ride sharing
     *
     * @return $this
     */
    public function setMaxRideSharingMonthlyDollars($max_ride_sharing_monthly_dollars)
    {
        $this->container['max_ride_sharing_monthly_dollars'] = $max_ride_sharing_monthly_dollars;

        return $this;
    }

    /**
     * Gets max_dependent_care_monthly_dollars
     *
     * @return float
     */
    public function getMaxDependentCareMonthlyDollars()
    {
        return $this->container['max_dependent_care_monthly_dollars'];
    }

    /**
     * Sets max_dependent_care_monthly_dollars
     *
     * @param float $max_dependent_care_monthly_dollars Maximum Monthly spend on dependent care
     *
     * @return $this
     */
    public function setMaxDependentCareMonthlyDollars($max_dependent_care_monthly_dollars)
    {
        $this->container['max_dependent_care_monthly_dollars'] = $max_dependent_care_monthly_dollars;

        return $this;
    }

    /**
     * Gets max_healthcare_monthly_dollars
     *
     * @return float
     */
    public function getMaxHealthcareMonthlyDollars()
    {
        return $this->container['max_healthcare_monthly_dollars'];
    }

    /**
     * Sets max_healthcare_monthly_dollars
     *
     * @param float $max_healthcare_monthly_dollars Maximum Monthly spend on healthcare
     *
     * @return $this
     */
    public function setMaxHealthcareMonthlyDollars($max_healthcare_monthly_dollars)
    {
        $this->container['max_healthcare_monthly_dollars'] = $max_healthcare_monthly_dollars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
