<?php
/**
 * EmployeeEnrollmentTimeSeriesSegmentEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeEnrollmentTimeSeriesSegmentEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeEnrollmentTimeSeriesSegmentEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeEnrollmentTimeSeriesSegmentEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'day' => '\DateTime',
'spending' => 'int',
'connected' => 'int',
'partially_connected' => 'int',
'none_connected' => 'int',
'connection_error' => 'int',
'reach' => 'int',
'enrolled' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'day' => 'date',
'spending' => 'int32',
'connected' => 'int32',
'partially_connected' => 'int32',
'none_connected' => 'int32',
'connection_error' => 'int32',
'reach' => 'int32',
'enrolled' => 'int32'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'day' => 'day',
'spending' => 'spending',
'connected' => 'connected',
'partially_connected' => 'partially_connected',
'none_connected' => 'none_connected',
'connection_error' => 'connection_error',
'reach' => 'reach',
'enrolled' => 'enrolled'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'day' => 'setDay',
'spending' => 'setSpending',
'connected' => 'setConnected',
'partially_connected' => 'setPartiallyConnected',
'none_connected' => 'setNoneConnected',
'connection_error' => 'setConnectionError',
'reach' => 'setReach',
'enrolled' => 'setEnrolled'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'day' => 'getDay',
'spending' => 'getSpending',
'connected' => 'getConnected',
'partially_connected' => 'getPartiallyConnected',
'none_connected' => 'getNoneConnected',
'connection_error' => 'getConnectionError',
'reach' => 'getReach',
'enrolled' => 'getEnrolled'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['spending'] = isset($data['spending']) ? $data['spending'] : null;
        $this->container['connected'] = isset($data['connected']) ? $data['connected'] : null;
        $this->container['partially_connected'] = isset($data['partially_connected']) ? $data['partially_connected'] : null;
        $this->container['none_connected'] = isset($data['none_connected']) ? $data['none_connected'] : null;
        $this->container['connection_error'] = isset($data['connection_error']) ? $data['connection_error'] : null;
        $this->container['reach'] = isset($data['reach']) ? $data['reach'] : null;
        $this->container['enrolled'] = isset($data['enrolled']) ? $data['enrolled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets day
     *
     * @return \DateTime
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param \DateTime $day Date for this segment of data
     *
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets spending
     *
     * @return int
     */
    public function getSpending()
    {
        return $this->container['spending'];
    }

    /**
     * Sets spending
     *
     * @param int $spending Number of users who have spent in the last 30 days
     *
     * @return $this
     */
    public function setSpending($spending)
    {
        $this->container['spending'] = $spending;

        return $this;
    }

    /**
     * Gets connected
     *
     * @return int
     */
    public function getConnected()
    {
        return $this->container['connected'];
    }

    /**
     * Sets connected
     *
     * @param int $connected Number of users who are connected
     *
     * @return $this
     */
    public function setConnected($connected)
    {
        $this->container['connected'] = $connected;

        return $this;
    }

    /**
     * Gets partially_connected
     *
     * @return int
     */
    public function getPartiallyConnected()
    {
        return $this->container['partially_connected'];
    }

    /**
     * Sets partially_connected
     *
     * @param int $partially_connected Number of users who are partially connected
     *
     * @return $this
     */
    public function setPartiallyConnected($partially_connected)
    {
        $this->container['partially_connected'] = $partially_connected;

        return $this;
    }

    /**
     * Gets none_connected
     *
     * @return int
     */
    public function getNoneConnected()
    {
        return $this->container['none_connected'];
    }

    /**
     * Sets none_connected
     *
     * @param int $none_connected Number of users who have no accounts connected
     *
     * @return $this
     */
    public function setNoneConnected($none_connected)
    {
        $this->container['none_connected'] = $none_connected;

        return $this;
    }

    /**
     * Gets connection_error
     *
     * @return int
     */
    public function getConnectionError()
    {
        return $this->container['connection_error'];
    }

    /**
     * Sets connection_error
     *
     * @param int $connection_error Number of users who have a connection error
     *
     * @return $this
     */
    public function setConnectionError($connection_error)
    {
        $this->container['connection_error'] = $connection_error;

        return $this;
    }

    /**
     * Gets reach
     *
     * @return int
     */
    public function getReach()
    {
        return $this->container['reach'];
    }

    /**
     * Sets reach
     *
     * @param int $reach Number of users who are not connected
     *
     * @return $this
     */
    public function setReach($reach)
    {
        $this->container['reach'] = $reach;

        return $this;
    }

    /**
     * Gets enrolled
     *
     * @return int
     */
    public function getEnrolled()
    {
        return $this->container['enrolled'];
    }

    /**
     * Sets enrolled
     *
     * @param int $enrolled Number of users who are enrolled
     *
     * @return $this
     */
    public function setEnrolled($enrolled)
    {
        $this->container['enrolled'] = $enrolled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
