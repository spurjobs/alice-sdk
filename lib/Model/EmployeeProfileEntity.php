<?php
/**
 * EmployeeProfileEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmployeeProfileEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmployeeProfileEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmployeeProfileEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'profile_name' => 'string',
'onboarding_status' => 'string',
'account_status' => 'string',
'company_name' => 'string',
'require_tos_acceptance' => 'bool',
'tos_accepted_at' => '\DateTime',
'employer_id' => 'int',
'enrollments' => '\Swagger\Client\Model\PretaxProgramEnrollmentCollectionEntity',
'banking_institutions' => '\Swagger\Client\Model\BankingInstitutionConnectionEntity[]',
'dependents' => '\Swagger\Client\Model\DependentEntity',
'marital_status' => 'string',
'pay_period_type' => 'string',
'address' => '\Swagger\Client\Model\AddressEntity',
'employer_onboarded' => 'bool',
'organization' => '\Swagger\Client\Model\EmployeeOrganizationEntity',
'health_plan' => '\Swagger\Client\Model\HealthPlanEntity',
'spending_profile' => 'object',
'hra_enabled' => 'bool',
'hra_reimbursement_claims' => '\Swagger\Client\Model\EmployeeReimbursementClaimEntity[]',
'needs_ssn' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'profile_name' => null,
'onboarding_status' => null,
'account_status' => null,
'company_name' => null,
'require_tos_acceptance' => null,
'tos_accepted_at' => 'date-time',
'employer_id' => 'int32',
'enrollments' => null,
'banking_institutions' => null,
'dependents' => null,
'marital_status' => null,
'pay_period_type' => null,
'address' => null,
'employer_onboarded' => null,
'organization' => null,
'health_plan' => null,
'spending_profile' => null,
'hra_enabled' => null,
'hra_reimbursement_claims' => null,
'needs_ssn' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profile_name' => 'profile_name',
'onboarding_status' => 'onboarding_status',
'account_status' => 'account_status',
'company_name' => 'company_name',
'require_tos_acceptance' => 'require_tos_acceptance',
'tos_accepted_at' => 'tos_accepted_at',
'employer_id' => 'employer_id',
'enrollments' => 'enrollments',
'banking_institutions' => 'banking_institutions',
'dependents' => 'dependents',
'marital_status' => 'marital_status',
'pay_period_type' => 'pay_period_type',
'address' => 'address',
'employer_onboarded' => 'employer_onboarded',
'organization' => 'organization',
'health_plan' => 'health_plan',
'spending_profile' => 'spending_profile',
'hra_enabled' => 'hra_enabled',
'hra_reimbursement_claims' => 'hra_reimbursement_claims',
'needs_ssn' => 'needs_ssn'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profile_name' => 'setProfileName',
'onboarding_status' => 'setOnboardingStatus',
'account_status' => 'setAccountStatus',
'company_name' => 'setCompanyName',
'require_tos_acceptance' => 'setRequireTosAcceptance',
'tos_accepted_at' => 'setTosAcceptedAt',
'employer_id' => 'setEmployerId',
'enrollments' => 'setEnrollments',
'banking_institutions' => 'setBankingInstitutions',
'dependents' => 'setDependents',
'marital_status' => 'setMaritalStatus',
'pay_period_type' => 'setPayPeriodType',
'address' => 'setAddress',
'employer_onboarded' => 'setEmployerOnboarded',
'organization' => 'setOrganization',
'health_plan' => 'setHealthPlan',
'spending_profile' => 'setSpendingProfile',
'hra_enabled' => 'setHraEnabled',
'hra_reimbursement_claims' => 'setHraReimbursementClaims',
'needs_ssn' => 'setNeedsSsn'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profile_name' => 'getProfileName',
'onboarding_status' => 'getOnboardingStatus',
'account_status' => 'getAccountStatus',
'company_name' => 'getCompanyName',
'require_tos_acceptance' => 'getRequireTosAcceptance',
'tos_accepted_at' => 'getTosAcceptedAt',
'employer_id' => 'getEmployerId',
'enrollments' => 'getEnrollments',
'banking_institutions' => 'getBankingInstitutions',
'dependents' => 'getDependents',
'marital_status' => 'getMaritalStatus',
'pay_period_type' => 'getPayPeriodType',
'address' => 'getAddress',
'employer_onboarded' => 'getEmployerOnboarded',
'organization' => 'getOrganization',
'health_plan' => 'getHealthPlan',
'spending_profile' => 'getSpendingProfile',
'hra_enabled' => 'getHraEnabled',
'hra_reimbursement_claims' => 'getHraReimbursementClaims',
'needs_ssn' => 'getNeedsSsn'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROFILE_NAME_EMPLOYEE = 'employee';
const PROFILE_NAME_ADMIN = 'admin';
const ONBOARDING_STATUS_NOT_INVITED = 'not_invited';
const ONBOARDING_STATUS_INVITED = 'invited';
const ONBOARDING_STATUS_NO_NAME = 'no_name';
const ONBOARDING_STATUS_TEL_NOT_VERIFIED = 'tel_not_verified';
const ONBOARDING_STATUS_NO_ACCOUNTS_CONNECTED = 'no_accounts_connected';
const ONBOARDING_STATUS_HEALTHCARE_ENROLLMENT_INCOMPLETE = 'healthcare_enrollment_incomplete';
const ONBOARDING_STATUS_DEPCARE_ENROLLMENT_INCOMPLETE = 'depcare_enrollment_incomplete';
const ONBOARDING_STATUS_NO_SPEND_YET = 'no_spend_yet';
const ONBOARDING_STATUS_ONBOARDED = 'onboarded';
const ACCOUNT_STATUS_ENROLLED = 'enrolled';
const ACCOUNT_STATUS_OPTED_OUT = 'opted_out';
const ACCOUNT_STATUS_NOT_ENROLLED = 'not_enrolled';
const ACCOUNT_STATUS_INELIGIBLE = 'ineligible';
const ACCOUNT_STATUS_TERMINATED = 'terminated';
const MARITAL_STATUS_SINGLE = 'single';
const MARITAL_STATUS_MARRIED = 'married';
const MARITAL_STATUS_SEPARATED = 'separated';
const MARITAL_STATUS_DIVORCED = 'divorced';
const PAY_PERIOD_TYPE_WEEKLY = 'weekly';
const PAY_PERIOD_TYPE_FORTNIGHTLY = 'fortnightly';
const PAY_PERIOD_TYPE_TWICE_PER_MONTH = 'twice_per_month';
const PAY_PERIOD_TYPE_MONTHLY = 'monthly';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProfileNameAllowableValues()
    {
        return [
            self::PROFILE_NAME_EMPLOYEE,
self::PROFILE_NAME_ADMIN,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getOnboardingStatusAllowableValues()
    {
        return [
            self::ONBOARDING_STATUS_NOT_INVITED,
self::ONBOARDING_STATUS_INVITED,
self::ONBOARDING_STATUS_NO_NAME,
self::ONBOARDING_STATUS_TEL_NOT_VERIFIED,
self::ONBOARDING_STATUS_NO_ACCOUNTS_CONNECTED,
self::ONBOARDING_STATUS_HEALTHCARE_ENROLLMENT_INCOMPLETE,
self::ONBOARDING_STATUS_DEPCARE_ENROLLMENT_INCOMPLETE,
self::ONBOARDING_STATUS_NO_SPEND_YET,
self::ONBOARDING_STATUS_ONBOARDED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccountStatusAllowableValues()
    {
        return [
            self::ACCOUNT_STATUS_ENROLLED,
self::ACCOUNT_STATUS_OPTED_OUT,
self::ACCOUNT_STATUS_NOT_ENROLLED,
self::ACCOUNT_STATUS_INELIGIBLE,
self::ACCOUNT_STATUS_TERMINATED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaritalStatusAllowableValues()
    {
        return [
            self::MARITAL_STATUS_SINGLE,
self::MARITAL_STATUS_MARRIED,
self::MARITAL_STATUS_SEPARATED,
self::MARITAL_STATUS_DIVORCED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPayPeriodTypeAllowableValues()
    {
        return [
            self::PAY_PERIOD_TYPE_WEEKLY,
self::PAY_PERIOD_TYPE_FORTNIGHTLY,
self::PAY_PERIOD_TYPE_TWICE_PER_MONTH,
self::PAY_PERIOD_TYPE_MONTHLY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profile_name'] = isset($data['profile_name']) ? $data['profile_name'] : 'employee';
        $this->container['onboarding_status'] = isset($data['onboarding_status']) ? $data['onboarding_status'] : 'onboarded';
        $this->container['account_status'] = isset($data['account_status']) ? $data['account_status'] : 'not_enrolled';
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : 'Acme co.';
        $this->container['require_tos_acceptance'] = isset($data['require_tos_acceptance']) ? $data['require_tos_acceptance'] : null;
        $this->container['tos_accepted_at'] = isset($data['tos_accepted_at']) ? $data['tos_accepted_at'] : null;
        $this->container['employer_id'] = isset($data['employer_id']) ? $data['employer_id'] : 1;
        $this->container['enrollments'] = isset($data['enrollments']) ? $data['enrollments'] : null;
        $this->container['banking_institutions'] = isset($data['banking_institutions']) ? $data['banking_institutions'] : null;
        $this->container['dependents'] = isset($data['dependents']) ? $data['dependents'] : null;
        $this->container['marital_status'] = isset($data['marital_status']) ? $data['marital_status'] : 'single';
        $this->container['pay_period_type'] = isset($data['pay_period_type']) ? $data['pay_period_type'] : 'weekly';
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['employer_onboarded'] = isset($data['employer_onboarded']) ? $data['employer_onboarded'] : true;
        $this->container['organization'] = isset($data['organization']) ? $data['organization'] : null;
        $this->container['health_plan'] = isset($data['health_plan']) ? $data['health_plan'] : null;
        $this->container['spending_profile'] = isset($data['spending_profile']) ? $data['spending_profile'] : null;
        $this->container['hra_enabled'] = isset($data['hra_enabled']) ? $data['hra_enabled'] : null;
        $this->container['hra_reimbursement_claims'] = isset($data['hra_reimbursement_claims']) ? $data['hra_reimbursement_claims'] : null;
        $this->container['needs_ssn'] = isset($data['needs_ssn']) ? $data['needs_ssn'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['profile_name'] === null) {
            $invalidProperties[] = "'profile_name' can't be null";
        }
        $allowedValues = $this->getProfileNameAllowableValues();
        if (!is_null($this->container['profile_name']) && !in_array($this->container['profile_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'profile_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['onboarding_status'] === null) {
            $invalidProperties[] = "'onboarding_status' can't be null";
        }
        $allowedValues = $this->getOnboardingStatusAllowableValues();
        if (!is_null($this->container['onboarding_status']) && !in_array($this->container['onboarding_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'onboarding_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['account_status'] === null) {
            $invalidProperties[] = "'account_status' can't be null";
        }
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!is_null($this->container['account_status']) && !in_array($this->container['account_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'account_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['company_name'] === null) {
            $invalidProperties[] = "'company_name' can't be null";
        }
        if ($this->container['employer_id'] === null) {
            $invalidProperties[] = "'employer_id' can't be null";
        }
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($this->container['marital_status']) && !in_array($this->container['marital_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'marital_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPayPeriodTypeAllowableValues();
        if (!is_null($this->container['pay_period_type']) && !in_array($this->container['pay_period_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pay_period_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['hra_enabled'] === null) {
            $invalidProperties[] = "'hra_enabled' can't be null";
        }
        if ($this->container['needs_ssn'] === null) {
            $invalidProperties[] = "'needs_ssn' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets profile_name
     *
     * @return string
     */
    public function getProfileName()
    {
        return $this->container['profile_name'];
    }

    /**
     * Sets profile_name
     *
     * @param string $profile_name type of profile
     *
     * @return $this
     */
    public function setProfileName($profile_name)
    {
        $allowedValues = $this->getProfileNameAllowableValues();
        if (!in_array($profile_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'profile_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['profile_name'] = $profile_name;

        return $this;
    }

    /**
     * Gets onboarding_status
     *
     * @return string
     */
    public function getOnboardingStatus()
    {
        return $this->container['onboarding_status'];
    }

    /**
     * Sets onboarding_status
     *
     * @param string $onboarding_status How far through onboarding a user is
     *
     * @return $this
     */
    public function setOnboardingStatus($onboarding_status)
    {
        $allowedValues = $this->getOnboardingStatusAllowableValues();
        if (!in_array($onboarding_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'onboarding_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['onboarding_status'] = $onboarding_status;

        return $this;
    }

    /**
     * Gets account_status
     *
     * @return string
     */
    public function getAccountStatus()
    {
        return $this->container['account_status'];
    }

    /**
     * Sets account_status
     *
     * @param string $account_status The employee's account status
     *
     * @return $this
     */
    public function setAccountStatus($account_status)
    {
        $allowedValues = $this->getAccountStatusAllowableValues();
        if (!in_array($account_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'account_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['account_status'] = $account_status;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name Employer Name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets require_tos_acceptance
     *
     * @return bool
     */
    public function getRequireTosAcceptance()
    {
        return $this->container['require_tos_acceptance'];
    }

    /**
     * Sets require_tos_acceptance
     *
     * @param bool $require_tos_acceptance Indicates whether or not the user needs to accept the employee TOS
     *
     * @return $this
     */
    public function setRequireTosAcceptance($require_tos_acceptance)
    {
        $this->container['require_tos_acceptance'] = $require_tos_acceptance;

        return $this;
    }

    /**
     * Gets tos_accepted_at
     *
     * @return \DateTime
     */
    public function getTosAcceptedAt()
    {
        return $this->container['tos_accepted_at'];
    }

    /**
     * Sets tos_accepted_at
     *
     * @param \DateTime $tos_accepted_at Date that the employee's terms of service were accepted
     *
     * @return $this
     */
    public function setTosAcceptedAt($tos_accepted_at)
    {
        $this->container['tos_accepted_at'] = $tos_accepted_at;

        return $this;
    }

    /**
     * Gets employer_id
     *
     * @return int
     */
    public function getEmployerId()
    {
        return $this->container['employer_id'];
    }

    /**
     * Sets employer_id
     *
     * @param int $employer_id Employer ID
     *
     * @return $this
     */
    public function setEmployerId($employer_id)
    {
        $this->container['employer_id'] = $employer_id;

        return $this;
    }

    /**
     * Gets enrollments
     *
     * @return \Swagger\Client\Model\PretaxProgramEnrollmentCollectionEntity
     */
    public function getEnrollments()
    {
        return $this->container['enrollments'];
    }

    /**
     * Sets enrollments
     *
     * @param \Swagger\Client\Model\PretaxProgramEnrollmentCollectionEntity $enrollments enrollments
     *
     * @return $this
     */
    public function setEnrollments($enrollments)
    {
        $this->container['enrollments'] = $enrollments;

        return $this;
    }

    /**
     * Gets banking_institutions
     *
     * @return \Swagger\Client\Model\BankingInstitutionConnectionEntity[]
     */
    public function getBankingInstitutions()
    {
        return $this->container['banking_institutions'];
    }

    /**
     * Sets banking_institutions
     *
     * @param \Swagger\Client\Model\BankingInstitutionConnectionEntity[] $banking_institutions banking_institutions
     *
     * @return $this
     */
    public function setBankingInstitutions($banking_institutions)
    {
        $this->container['banking_institutions'] = $banking_institutions;

        return $this;
    }

    /**
     * Gets dependents
     *
     * @return \Swagger\Client\Model\DependentEntity
     */
    public function getDependents()
    {
        return $this->container['dependents'];
    }

    /**
     * Sets dependents
     *
     * @param \Swagger\Client\Model\DependentEntity $dependents dependents
     *
     * @return $this
     */
    public function setDependents($dependents)
    {
        $this->container['dependents'] = $dependents;

        return $this;
    }

    /**
     * Gets marital_status
     *
     * @return string
     */
    public function getMaritalStatus()
    {
        return $this->container['marital_status'];
    }

    /**
     * Sets marital_status
     *
     * @param string $marital_status Employee marital status
     *
     * @return $this
     */
    public function setMaritalStatus($marital_status)
    {
        $allowedValues = $this->getMaritalStatusAllowableValues();
        if (!is_null($marital_status) && !in_array($marital_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'marital_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['marital_status'] = $marital_status;

        return $this;
    }

    /**
     * Gets pay_period_type
     *
     * @return string
     */
    public function getPayPeriodType()
    {
        return $this->container['pay_period_type'];
    }

    /**
     * Sets pay_period_type
     *
     * @param string $pay_period_type Frequency of employer payroll
     *
     * @return $this
     */
    public function setPayPeriodType($pay_period_type)
    {
        $allowedValues = $this->getPayPeriodTypeAllowableValues();
        if (!is_null($pay_period_type) && !in_array($pay_period_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pay_period_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pay_period_type'] = $pay_period_type;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\AddressEntity
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\AddressEntity $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets employer_onboarded
     *
     * @return bool
     */
    public function getEmployerOnboarded()
    {
        return $this->container['employer_onboarded'];
    }

    /**
     * Sets employer_onboarded
     *
     * @param bool $employer_onboarded Has employer completed onboarding
     *
     * @return $this
     */
    public function setEmployerOnboarded($employer_onboarded)
    {
        $this->container['employer_onboarded'] = $employer_onboarded;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \Swagger\Client\Model\EmployeeOrganizationEntity
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \Swagger\Client\Model\EmployeeOrganizationEntity $organization organization
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets health_plan
     *
     * @return \Swagger\Client\Model\HealthPlanEntity
     */
    public function getHealthPlan()
    {
        return $this->container['health_plan'];
    }

    /**
     * Sets health_plan
     *
     * @param \Swagger\Client\Model\HealthPlanEntity $health_plan health_plan
     *
     * @return $this
     */
    public function setHealthPlan($health_plan)
    {
        $this->container['health_plan'] = $health_plan;

        return $this;
    }

    /**
     * Gets spending_profile
     *
     * @return object
     */
    public function getSpendingProfile()
    {
        return $this->container['spending_profile'];
    }

    /**
     * Sets spending_profile
     *
     * @param object $spending_profile Employee spending profile
     *
     * @return $this
     */
    public function setSpendingProfile($spending_profile)
    {
        $this->container['spending_profile'] = $spending_profile;

        return $this;
    }

    /**
     * Gets hra_enabled
     *
     * @return bool
     */
    public function getHraEnabled()
    {
        return $this->container['hra_enabled'];
    }

    /**
     * Sets hra_enabled
     *
     * @param bool $hra_enabled Whether employee is has HRA enabled or not
     *
     * @return $this
     */
    public function setHraEnabled($hra_enabled)
    {
        $this->container['hra_enabled'] = $hra_enabled;

        return $this;
    }

    /**
     * Gets hra_reimbursement_claims
     *
     * @return \Swagger\Client\Model\EmployeeReimbursementClaimEntity[]
     */
    public function getHraReimbursementClaims()
    {
        return $this->container['hra_reimbursement_claims'];
    }

    /**
     * Sets hra_reimbursement_claims
     *
     * @param \Swagger\Client\Model\EmployeeReimbursementClaimEntity[] $hra_reimbursement_claims hra_reimbursement_claims
     *
     * @return $this
     */
    public function setHraReimbursementClaims($hra_reimbursement_claims)
    {
        $this->container['hra_reimbursement_claims'] = $hra_reimbursement_claims;

        return $this;
    }

    /**
     * Gets needs_ssn
     *
     * @return bool
     */
    public function getNeedsSsn()
    {
        return $this->container['needs_ssn'];
    }

    /**
     * Sets needs_ssn
     *
     * @param bool $needs_ssn Whether or not we need an SSN from this employee
     *
     * @return $this
     */
    public function setNeedsSsn($needs_ssn)
    {
        $this->container['needs_ssn'] = $needs_ssn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
