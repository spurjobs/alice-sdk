<?php
/**
 * BankingTransactionEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * BankingTransactionEntity Class Doc Comment
 *
 * @category Class
 * @description Standalone transaction creation is intended for cash transactions and cases where the user cannot connect one or more of their cards
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BankingTransactionEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BankingTransactionEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'date' => '\DateTime',
'amount_dollars' => 'float',
'pretax_category' => 'string',
'estimated_savings_dollars' => 'float',
'confirmed' => 'bool',
'confirmed_at' => '\DateTime',
'confirmed_eligible_spend' => 'bool',
'id' => 'string',
'approval_status' => 'string',
'reimbursement_claim' => '\Swagger\Client\Model\EmployeeReimbursementClaimEntity',
'standalone' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'date' => 'date',
'amount_dollars' => 'float',
'pretax_category' => null,
'estimated_savings_dollars' => 'float',
'confirmed' => null,
'confirmed_at' => 'date-time',
'confirmed_eligible_spend' => null,
'id' => null,
'approval_status' => null,
'reimbursement_claim' => null,
'standalone' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'date' => 'date',
'amount_dollars' => 'amount_dollars',
'pretax_category' => 'pretax_category',
'estimated_savings_dollars' => 'estimated_savings_dollars',
'confirmed' => 'confirmed',
'confirmed_at' => 'confirmed_at',
'confirmed_eligible_spend' => 'confirmed_eligible_spend',
'id' => 'id',
'approval_status' => 'approval_status',
'reimbursement_claim' => 'reimbursement_claim',
'standalone' => 'standalone'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'date' => 'setDate',
'amount_dollars' => 'setAmountDollars',
'pretax_category' => 'setPretaxCategory',
'estimated_savings_dollars' => 'setEstimatedSavingsDollars',
'confirmed' => 'setConfirmed',
'confirmed_at' => 'setConfirmedAt',
'confirmed_eligible_spend' => 'setConfirmedEligibleSpend',
'id' => 'setId',
'approval_status' => 'setApprovalStatus',
'reimbursement_claim' => 'setReimbursementClaim',
'standalone' => 'setStandalone'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'date' => 'getDate',
'amount_dollars' => 'getAmountDollars',
'pretax_category' => 'getPretaxCategory',
'estimated_savings_dollars' => 'getEstimatedSavingsDollars',
'confirmed' => 'getConfirmed',
'confirmed_at' => 'getConfirmedAt',
'confirmed_eligible_spend' => 'getConfirmedEligibleSpend',
'id' => 'getId',
'approval_status' => 'getApprovalStatus',
'reimbursement_claim' => 'getReimbursementClaim',
'standalone' => 'getStandalone'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PRETAX_CATEGORY_MASS_TRANSIT = 'mass_transit';
const PRETAX_CATEGORY_PARKING = 'parking';
const PRETAX_CATEGORY_NOT_ELIGIBLE = 'not_eligible';
const PRETAX_CATEGORY_DEPENDENT_CARE = 'dependent_care';
const PRETAX_CATEGORY_HEALTHCARE = 'healthcare';
const PRETAX_CATEGORY_DENTAL = 'dental';
const PRETAX_CATEGORY_VISION = 'vision';
const PRETAX_CATEGORY_HEALTHCARE_PHARMACY = 'healthcare_pharmacy';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPretaxCategoryAllowableValues()
    {
        return [
            self::PRETAX_CATEGORY_MASS_TRANSIT,
self::PRETAX_CATEGORY_PARKING,
self::PRETAX_CATEGORY_NOT_ELIGIBLE,
self::PRETAX_CATEGORY_DEPENDENT_CARE,
self::PRETAX_CATEGORY_HEALTHCARE,
self::PRETAX_CATEGORY_DENTAL,
self::PRETAX_CATEGORY_VISION,
self::PRETAX_CATEGORY_HEALTHCARE_PHARMACY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : 'Metropolitain Transportation Authority';
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['amount_dollars'] = isset($data['amount_dollars']) ? $data['amount_dollars'] : 40.0;
        $this->container['pretax_category'] = isset($data['pretax_category']) ? $data['pretax_category'] : 'mass_transit';
        $this->container['estimated_savings_dollars'] = isset($data['estimated_savings_dollars']) ? $data['estimated_savings_dollars'] : 18.38;
        $this->container['confirmed'] = isset($data['confirmed']) ? $data['confirmed'] : true;
        $this->container['confirmed_at'] = isset($data['confirmed_at']) ? $data['confirmed_at'] : null;
        $this->container['confirmed_eligible_spend'] = isset($data['confirmed_eligible_spend']) ? $data['confirmed_eligible_spend'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : 'txn_1';
        $this->container['approval_status'] = isset($data['approval_status']) ? $data['approval_status'] : 'not_required';
        $this->container['reimbursement_claim'] = isset($data['reimbursement_claim']) ? $data['reimbursement_claim'] : null;
        $this->container['standalone'] = isset($data['standalone']) ? $data['standalone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['amount_dollars'] === null) {
            $invalidProperties[] = "'amount_dollars' can't be null";
        }
        if ($this->container['pretax_category'] === null) {
            $invalidProperties[] = "'pretax_category' can't be null";
        }
        $allowedValues = $this->getPretaxCategoryAllowableValues();
        if (!is_null($this->container['pretax_category']) && !in_array($this->container['pretax_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'pretax_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['estimated_savings_dollars'] === null) {
            $invalidProperties[] = "'estimated_savings_dollars' can't be null";
        }
        if ($this->container['confirmed'] === null) {
            $invalidProperties[] = "'confirmed' can't be null";
        }
        if ($this->container['confirmed_at'] === null) {
            $invalidProperties[] = "'confirmed_at' can't be null";
        }
        if ($this->container['confirmed_eligible_spend'] === null) {
            $invalidProperties[] = "'confirmed_eligible_spend' can't be null";
        }
        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['approval_status'] === null) {
            $invalidProperties[] = "'approval_status' can't be null";
        }
        if ($this->container['standalone'] === null) {
            $invalidProperties[] = "'standalone' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Transaction name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Transaction date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets amount_dollars
     *
     * @return float
     */
    public function getAmountDollars()
    {
        return $this->container['amount_dollars'];
    }

    /**
     * Sets amount_dollars
     *
     * @param float $amount_dollars Amount of the transaction in dollars
     *
     * @return $this
     */
    public function setAmountDollars($amount_dollars)
    {
        $this->container['amount_dollars'] = $amount_dollars;

        return $this;
    }

    /**
     * Gets pretax_category
     *
     * @return string
     */
    public function getPretaxCategory()
    {
        return $this->container['pretax_category'];
    }

    /**
     * Sets pretax_category
     *
     * @param string $pretax_category Pretax program this transaction belongs to
     *
     * @return $this
     */
    public function setPretaxCategory($pretax_category)
    {
        $allowedValues = $this->getPretaxCategoryAllowableValues();
        if (!in_array($pretax_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'pretax_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['pretax_category'] = $pretax_category;

        return $this;
    }

    /**
     * Gets estimated_savings_dollars
     *
     * @return float
     */
    public function getEstimatedSavingsDollars()
    {
        return $this->container['estimated_savings_dollars'];
    }

    /**
     * Sets estimated_savings_dollars
     *
     * @param float $estimated_savings_dollars Estimated tax saving for this transaction
     *
     * @return $this
     */
    public function setEstimatedSavingsDollars($estimated_savings_dollars)
    {
        $this->container['estimated_savings_dollars'] = $estimated_savings_dollars;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return bool
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param bool $confirmed Confirmed
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets confirmed_at
     *
     * @return \DateTime
     */
    public function getConfirmedAt()
    {
        return $this->container['confirmed_at'];
    }

    /**
     * Sets confirmed_at
     *
     * @param \DateTime $confirmed_at Confirmation date
     *
     * @return $this
     */
    public function setConfirmedAt($confirmed_at)
    {
        $this->container['confirmed_at'] = $confirmed_at;

        return $this;
    }

    /**
     * Gets confirmed_eligible_spend
     *
     * @return bool
     */
    public function getConfirmedEligibleSpend()
    {
        return $this->container['confirmed_eligible_spend'];
    }

    /**
     * Sets confirmed_eligible_spend
     *
     * @param bool $confirmed_eligible_spend Confirmed eligible spend by user
     *
     * @return $this
     */
    public function setConfirmedEligibleSpend($confirmed_eligible_spend)
    {
        $this->container['confirmed_eligible_spend'] = $confirmed_eligible_spend;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets approval_status
     *
     * @return string
     */
    public function getApprovalStatus()
    {
        return $this->container['approval_status'];
    }

    /**
     * Sets approval_status
     *
     * @param string $approval_status Approval status from the reimbursement claim, if it exists
     *
     * @return $this
     */
    public function setApprovalStatus($approval_status)
    {
        $this->container['approval_status'] = $approval_status;

        return $this;
    }

    /**
     * Gets reimbursement_claim
     *
     * @return \Swagger\Client\Model\EmployeeReimbursementClaimEntity
     */
    public function getReimbursementClaim()
    {
        return $this->container['reimbursement_claim'];
    }

    /**
     * Sets reimbursement_claim
     *
     * @param \Swagger\Client\Model\EmployeeReimbursementClaimEntity $reimbursement_claim reimbursement_claim
     *
     * @return $this
     */
    public function setReimbursementClaim($reimbursement_claim)
    {
        $this->container['reimbursement_claim'] = $reimbursement_claim;

        return $this;
    }

    /**
     * Gets standalone
     *
     * @return bool
     */
    public function getStandalone()
    {
        return $this->container['standalone'];
    }

    /**
     * Sets standalone
     *
     * @param bool $standalone Is this a standalone transaction, with no bank account?
     *
     * @return $this
     */
    public function setStandalone($standalone)
    {
        $this->container['standalone'] = $standalone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
