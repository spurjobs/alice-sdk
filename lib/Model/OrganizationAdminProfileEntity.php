<?php
/**
 * OrganizationAdminProfileEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OrganizationAdminProfileEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OrganizationAdminProfileEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OrganizationAdminProfileEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'profile_name' => 'string',
'num_companies' => 'int',
'unified_billing' => 'bool',
'require_tos_acceptance' => 'bool',
'tos_accepted_at' => '\DateTime',
'admin_reports' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'profile_name' => null,
'num_companies' => 'int32',
'unified_billing' => null,
'require_tos_acceptance' => null,
'tos_accepted_at' => 'date-time',
'admin_reports' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'profile_name' => 'profile_name',
'num_companies' => 'num_companies',
'unified_billing' => 'unified_billing',
'require_tos_acceptance' => 'require_tos_acceptance',
'tos_accepted_at' => 'tos_accepted_at',
'admin_reports' => 'admin_reports'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'profile_name' => 'setProfileName',
'num_companies' => 'setNumCompanies',
'unified_billing' => 'setUnifiedBilling',
'require_tos_acceptance' => 'setRequireTosAcceptance',
'tos_accepted_at' => 'setTosAcceptedAt',
'admin_reports' => 'setAdminReports'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'profile_name' => 'getProfileName',
'num_companies' => 'getNumCompanies',
'unified_billing' => 'getUnifiedBilling',
'require_tos_acceptance' => 'getRequireTosAcceptance',
'tos_accepted_at' => 'getTosAcceptedAt',
'admin_reports' => 'getAdminReports'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const PROFILE_NAME_EMPLOYEE = 'employee';
const PROFILE_NAME_ADMIN = 'admin';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProfileNameAllowableValues()
    {
        return [
            self::PROFILE_NAME_EMPLOYEE,
self::PROFILE_NAME_ADMIN,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['profile_name'] = isset($data['profile_name']) ? $data['profile_name'] : 'employee';
        $this->container['num_companies'] = isset($data['num_companies']) ? $data['num_companies'] : 1;
        $this->container['unified_billing'] = isset($data['unified_billing']) ? $data['unified_billing'] : null;
        $this->container['require_tos_acceptance'] = isset($data['require_tos_acceptance']) ? $data['require_tos_acceptance'] : null;
        $this->container['tos_accepted_at'] = isset($data['tos_accepted_at']) ? $data['tos_accepted_at'] : null;
        $this->container['admin_reports'] = isset($data['admin_reports']) ? $data['admin_reports'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['profile_name'] === null) {
            $invalidProperties[] = "'profile_name' can't be null";
        }
        $allowedValues = $this->getProfileNameAllowableValues();
        if (!is_null($this->container['profile_name']) && !in_array($this->container['profile_name'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'profile_name', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets profile_name
     *
     * @return string
     */
    public function getProfileName()
    {
        return $this->container['profile_name'];
    }

    /**
     * Sets profile_name
     *
     * @param string $profile_name type of profile
     *
     * @return $this
     */
    public function setProfileName($profile_name)
    {
        $allowedValues = $this->getProfileNameAllowableValues();
        if (!in_array($profile_name, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'profile_name', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['profile_name'] = $profile_name;

        return $this;
    }

    /**
     * Gets num_companies
     *
     * @return int
     */
    public function getNumCompanies()
    {
        return $this->container['num_companies'];
    }

    /**
     * Sets num_companies
     *
     * @param int $num_companies Number of companies
     *
     * @return $this
     */
    public function setNumCompanies($num_companies)
    {
        $this->container['num_companies'] = $num_companies;

        return $this;
    }

    /**
     * Gets unified_billing
     *
     * @return bool
     */
    public function getUnifiedBilling()
    {
        return $this->container['unified_billing'];
    }

    /**
     * Sets unified_billing
     *
     * @param bool $unified_billing Unified billing
     *
     * @return $this
     */
    public function setUnifiedBilling($unified_billing)
    {
        $this->container['unified_billing'] = $unified_billing;

        return $this;
    }

    /**
     * Gets require_tos_acceptance
     *
     * @return bool
     */
    public function getRequireTosAcceptance()
    {
        return $this->container['require_tos_acceptance'];
    }

    /**
     * Sets require_tos_acceptance
     *
     * @param bool $require_tos_acceptance Indicates whether or not the user needs to accept the employee TOS
     *
     * @return $this
     */
    public function setRequireTosAcceptance($require_tos_acceptance)
    {
        $this->container['require_tos_acceptance'] = $require_tos_acceptance;

        return $this;
    }

    /**
     * Gets tos_accepted_at
     *
     * @return \DateTime
     */
    public function getTosAcceptedAt()
    {
        return $this->container['tos_accepted_at'];
    }

    /**
     * Sets tos_accepted_at
     *
     * @param \DateTime $tos_accepted_at Date that the employee's terms of service were accepted
     *
     * @return $this
     */
    public function setTosAcceptedAt($tos_accepted_at)
    {
        $this->container['tos_accepted_at'] = $tos_accepted_at;

        return $this;
    }

    /**
     * Gets admin_reports
     *
     * @return bool
     */
    public function getAdminReports()
    {
        return $this->container['admin_reports'];
    }

    /**
     * Sets admin_reports
     *
     * @param bool $admin_reports Whether payroll reports are enabled
     *
     * @return $this
     */
    public function setAdminReports($admin_reports)
    {
        $this->container['admin_reports'] = $admin_reports;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
