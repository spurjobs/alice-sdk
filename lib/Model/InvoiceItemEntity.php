<?php
/**
 * InvoiceItemEntity
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Alice Payroll Provider API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.7
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InvoiceItemEntity Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InvoiceItemEntity implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InvoiceItemEntity';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'description' => 'string',
'employee_deductions_dollars' => 'float',
'employer_gross_savings_dollars' => 'float',
'employer_net_savings_dollars' => 'float',
'amount_dollars' => 'float'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'description' => null,
'employee_deductions_dollars' => 'float',
'employer_gross_savings_dollars' => 'float',
'employer_net_savings_dollars' => 'float',
'amount_dollars' => 'float'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'description' => 'description',
'employee_deductions_dollars' => 'employee_deductions_dollars',
'employer_gross_savings_dollars' => 'employer_gross_savings_dollars',
'employer_net_savings_dollars' => 'employer_net_savings_dollars',
'amount_dollars' => 'amount_dollars'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'description' => 'setDescription',
'employee_deductions_dollars' => 'setEmployeeDeductionsDollars',
'employer_gross_savings_dollars' => 'setEmployerGrossSavingsDollars',
'employer_net_savings_dollars' => 'setEmployerNetSavingsDollars',
'amount_dollars' => 'setAmountDollars'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'description' => 'getDescription',
'employee_deductions_dollars' => 'getEmployeeDeductionsDollars',
'employer_gross_savings_dollars' => 'getEmployerGrossSavingsDollars',
'employer_net_savings_dollars' => 'getEmployerNetSavingsDollars',
'amount_dollars' => 'getAmountDollars'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['description'] = isset($data['description']) ? $data['description'] : '';
        $this->container['employee_deductions_dollars'] = isset($data['employee_deductions_dollars']) ? $data['employee_deductions_dollars'] : 121.0;
        $this->container['employer_gross_savings_dollars'] = isset($data['employer_gross_savings_dollars']) ? $data['employer_gross_savings_dollars'] : 9.5;
        $this->container['employer_net_savings_dollars'] = isset($data['employer_net_savings_dollars']) ? $data['employer_net_savings_dollars'] : 4.75;
        $this->container['amount_dollars'] = isset($data['amount_dollars']) ? $data['amount_dollars'] : 4.75;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Invoice
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets employee_deductions_dollars
     *
     * @return float
     */
    public function getEmployeeDeductionsDollars()
    {
        return $this->container['employee_deductions_dollars'];
    }

    /**
     * Sets employee_deductions_dollars
     *
     * @param float $employee_deductions_dollars Total employee deductions
     *
     * @return $this
     */
    public function setEmployeeDeductionsDollars($employee_deductions_dollars)
    {
        $this->container['employee_deductions_dollars'] = $employee_deductions_dollars;

        return $this;
    }

    /**
     * Gets employer_gross_savings_dollars
     *
     * @return float
     */
    public function getEmployerGrossSavingsDollars()
    {
        return $this->container['employer_gross_savings_dollars'];
    }

    /**
     * Sets employer_gross_savings_dollars
     *
     * @param float $employer_gross_savings_dollars Total employer gross savings
     *
     * @return $this
     */
    public function setEmployerGrossSavingsDollars($employer_gross_savings_dollars)
    {
        $this->container['employer_gross_savings_dollars'] = $employer_gross_savings_dollars;

        return $this;
    }

    /**
     * Gets employer_net_savings_dollars
     *
     * @return float
     */
    public function getEmployerNetSavingsDollars()
    {
        return $this->container['employer_net_savings_dollars'];
    }

    /**
     * Sets employer_net_savings_dollars
     *
     * @param float $employer_net_savings_dollars Total employer net savings
     *
     * @return $this
     */
    public function setEmployerNetSavingsDollars($employer_net_savings_dollars)
    {
        $this->container['employer_net_savings_dollars'] = $employer_net_savings_dollars;

        return $this;
    }

    /**
     * Gets amount_dollars
     *
     * @return float
     */
    public function getAmountDollars()
    {
        return $this->container['amount_dollars'];
    }

    /**
     * Sets amount_dollars
     *
     * @param float $amount_dollars Alice share
     *
     * @return $this
     */
    public function setAmountDollars($amount_dollars)
    {
        $this->container['amount_dollars'] = $amount_dollars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
